{
	"added": "Successfully added a new tag: **{{name}}** with a content of:\n{{content}}",
	"description": "Manage this guilds' tags.",
	"edited": "Successfully edited the tag **{{name}}** with a content of:\n{{content}}",
	"exists": "The tag '{{tag}}' already exists.",
	"extended": {
		"usages": [
			"add/remove/edit/rename/source/list/reset/show Tag Content",
			"add Tag Content --embed --color=Color",
			"rename OldName NewName"
		],
		"extendedHelp": "Tags, also known as custom commands, can give you a chunk of text stored under a specific name.\nFor example after adding a tag with `Skyra, tag add rule1 <your first rule>` you can use it with `Skyra, rule1` or `Skyra, tag rule1`\nWhen adding tags you can customize the final look by adding flags to the tag content (these won't show up in the tag itself!), see Explained usage below.",
		"explainedUsage": [
			[
				"add/remove/edit/rename/source/list/reset/show",
				"Whether to\n　- Add a new tag.\n　- Remove an existing tag\n　- Edit an existing tag\n　- Rename an existing tag\n　- View the source of an existing tag\n　- List all available tags\n　- Reset all tags\n　- Show an existing tag, same as calling that tag directly."
			],
			[
				"Tag",
				"The name of the tag. Not needed for \"reset\" and \"list\"."
			],
			[
				"Content",
				"The content for the tag. Only needed for \"add\" and \"edit\"."
			],
			[
				"--embed",
				"If adding the --embed flag to \"add\" or \"edit\" then the message of the tag will be sent in an embed. Useful if you want to [embed links](https://skyra.pw) or other markdown."
			],
			[
				"--color=Color, --colour=Color",
				"The color of the embed. Has no use without the --embed flag. Defaults to blue. Colours can be RGB, HSL, HEX or Decimal."
			]
		],
		"examples": [
			"add rule1 Respect other users. Harassment, hatespeech, etc... will not be tolerated.",
			"add rule1 --embed --color=#1E88E5 Respect other users. Harassment, hatespeech, etc... will not be tolerated.",
			"edit rule1 Just be respectful with the others.",
			"rename rule1 rule2",
			"rule1",
			"source rule1",
			"remove rule1",
			"list"
		]
	},
	"listEmpty": "The tag list for this server is empty.",
	"nameNotAllowed": "A tag name may not have a grave accent nor invisible characters.",
	"nameTooLong": "A tag name must be 50 or less characters long.",
	"notexists": "The tag '{{tag}}' does not exist.",
	"permissionlevel": "You must be a staff member, moderator, or admin, to be able to manage tags.",
	"removed": "Successfully removed the tag **{{name}}**.",
	"renamed": "Successfully renamed the tag **{{previous}}** to **{{name}}**.",
	"reset": "All tags have been successfully removed from this server.",
	"parseMismatchingNamedArgumentTypeValidation": "{{REDCROSS}} Mismatching named argument types, expected `{{expected.type}}` but received `{{received.type}}`.",
	"parseParserEmptyStringTag": "{{REDCROSS}} Content tags must have at least one character.",
	"parseParserMissingToken": "{{REDCROSS}} A token was expected for the last tag, but none was given.",
	"parseParserPickMissingOptions": "{{REDCROSS}} Pick tags require at least one option to be given.",
	"parseParserRandomDuplicatedOptions": "{{REDCROSS}} Random tags cannot have duplicated options.",
	"parseParserRandomMissingOptions": "{{REDCROSS}} Random tags must have at least two items.",
	"parseParserUnexpectedToken": "{{REDCROSS}} I expected {{expected}}, however, I received a token {{received}}.",
	"parsePickInvalidOption": "{{REDCROSS}} The key `{{option}}` is not a valid option.",
	"parseSentenceMissingArgument": "{{REDCROSS}} An argument must be specified for this argument.",
	"parseTokenColon": "Colon (\":\")",
	"parseTokenEquals": "Equals (\"=\")",
	"parseTokenLiteral": "Literal (Any Word)",
	"parseTokenPipe": "Pipe (\"|\")",
	"parseTokenSpace": "Space (\" \")",
	"parseTokenTagEnd": "Tag End (\"}\")",
	"parseTokenTagStart": "Tag Start (\"{\")",
	"parseTransformerInvalidFormatter": "{{REDCROSS}} The key `{{formatter}}` does not correspond with a valid formatter."
}
