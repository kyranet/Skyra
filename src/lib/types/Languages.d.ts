import type { ScheduleEntity } from '@orm/entities/ScheduleEntity';
import type { EightBallLanguage } from '@root/commands/Fun/8ball';
import type { HungerGamesGame } from '@root/commands/Games/hungergames';
import type { LevelTitles } from '@root/commands/Social/level';
import type { ProfileTitles } from '@root/commands/Social/profile';
import type { StatsGeneral, StatsUptime, StatsUsage } from '@root/commands/System/stats';
import type { Moderation } from '@utils/constants';
import type { LanguageHelpDisplayOptions } from '@utils/LanguageHelp';
import type { Guild, GuildMember, Role, User } from 'discord.js';

export interface ModerationAction {
	addRole: string;
	mute: string;
	ban: string;
	kick: string;
	softban: string;
	vkick: string;
	vmute: string;
	restrictedReact: string;
	restrictedEmbed: string;
	restrictedAttachment: string;
	restrictedVoice: string;
	setNickname: string;
	removeRole: string;
}

declare module 'klasa' {
	export interface LanguageKeys {
		default: (params: { key: string }) => string;
		defaultLanguage: string;

		globalYes: string;
		globalNo: string;
		globalNone: string;
		globalIs: string;
		globalAnd: string;
		globalOr: string;
		globalUnknown: string;

		settingGatewayKeyNoext: (params: { key: string }) => string;
		settingGatewayChooseKey: (params: { keys: string }) => string;
		settingGatewayUnconfigurableFolder: string;
		settingGatewayUnconfigurableKey: (params: { key: string }) => string;
		settingGatewayMissingValue: (params: { path: string; value: string }) => string;
		settingGatewayDuplicateValue: (params: { path: string; value: string }) => string;
		settingGatewayInvalidFilteredValue: (params: { path: string; value: unknown }) => string;
		resolverMultiTooFew: (params: { name: string; min?: number; conjunctionWord: string }) => string;
		resolverInvalidBool: (params: { name: string }) => string;
		resolverInvalidChannel: (params: { name: string }) => string;
		resolverInvalidCustom: (params: { name: string; type: string }) => string;
		resolverInvalidDate: (params: { name: string }) => string;
		resolverInvalidDuration: (params: { name: string }) => string;
		resolverInvalidEmoji: (params: { name: string }) => string;
		resolverInvalidFloat: (params: { name: string }) => string;
		resolverInvalidGuild: (params: { name: string }) => string;
		resolverInvalidInt: (params: { name: string }) => string;
		resolverInvalidInvite: (params: { name: string }) => string;
		resolverInvalidWager: (params: { bet: number; validAmounts: string }) => string;
		resolverInvalidLiteral: (params: { name: string }) => string;
		resolverInvalidMember: (params: { name: string }) => string;
		resolverInvalidMessage: (params: { name: string }) => string;
		resolverInvalidPiece: (params: { name: string; piece: string }) => string;
		resolverInvalidRegexMatch: (params: { name: string; pattern: string }) => string;
		resolverInvalidRole: (params: { name: string }) => string;
		resolverInvalidString: (params: { name: string }) => string;
		resolverInvalidTime: (params: { name: string }) => string;
		resolverInvalidUrl: (params: { name: string }) => string;
		resolverInvalidUser: (params: { name: string }) => string;
		resolverInvalidSnowflake: (params: { name: string }) => string;
		resolverInvalidStore: (params: { store: string }) => string;
		resolverStringSuffix: string;
		resolverMinmaxExactlyInclusive: (params: { name: string; min: number }) => string;
		resolverMinmaxExactlyExclusive: (params: { name: string; min: number }) => string;
		resolverMinmaxBothInclusive: (params: { name: string; min: number; max: number }) => string;
		resolverMinmaxBothExclusive: (params: { name: string; min: number; max: number }) => string;
		resolverMinmaxMinInclusive: (params: { name: string; min: number }) => string;
		resolverMinmaxMinExclusive: (params: { name: string; min: number }) => string;
		resolverMinmaxMaxInclusive: (params: { name: string; max: number }) => string;
		resolverMinmaxMaxExclusive: (params: { name: string; max: number }) => string;
		reactionhandlerPrompt: string;
		commandmessageMissing: string;
		commandmessageMissingRequired: (params: { name: string }) => string;
		commandmessageMissingOptionals: (params: { possibles: string }) => string;
		commandmessageNomatch: (params: { possibles: string }) => string;
		monitorCommandHandlerReprompt: (params: { tag: string; name: string; time: string; cancelOptions: string }) => string;
		monitorCommandHandlerRepeatingReprompt: (params: { tag: string; name: string; time: string; cancelOptions: string }) => string;
		monitorCommandHandlerAborted: string;
		inhibitorCooldown: (params: { remaining: string }) => string;
		inhibitorMissingBotPerms: (params: { missing: string }) => string;
		inhibitorNsfw: string;
		inhibitorPermissions: string;
		inhibitorRequiredSettings: (params: { settings: string; count: number }) => string;
		inhibitorRequiredSettingsPlural: (params: { settings: string; count: number }) => string;
		inhibitorRunin: (params: { type: string }) => string;
		inhibitorRuninNone: (params: { name: string }) => string;
		inhibitorDisabledGuild: string;
		inhibitorDisabledGlobal: string;
		/** used to build a LanguageBuilder for extendedHelp */
		systemHelpTitles: {
			explainedUsage: string;
			possibleFormats: string;
			examples: string;
			reminders: string;
		};
		commandBlocklistDescription: string;
		commandBlocklistSaveSuccess: string;
		commandBlocklistResetSuccess: string;
		commandUnload: (params: { type: string; name: string }) => string;
		commandUnloadDescription: string;
		commandTransferError: string;
		commandTransferSuccess: (params: { type: string; name: string }) => string;
		commandTransferFailed: (params: { type: string; name: string }) => string;
		commandTransferDescription: string;
		commandReload: (params: { type: string; name: string; time: string }) => string;
		commandReloadAll: (params: { type: string; time: string }) => string;
		commandReloadEverything: (params: { time: string }) => string;
		commandReloadFailed: (params: { type: string; name: string }) => string;
		commandReloadDescription: string;
		commandReboot: string;
		commandRebootDescription: string;
		commandPing: string;
		commandPingDescription: string;
		commandPingPong: (params: { diff: number; ping: number }) => string;
		commandInfoDescription: string;
		commandHelpDescription: string;
		commandHelpNoExtended: string;
		commandHelpDm: string;
		commandHelpNodm: string;
		commandHelpAllFlag: (params: { prefix: string }) => string;
		commandHelpCommandCount: (params: { count: number }) => string;
		commandHelpCommandCountPlural: (params: { count: number }) => string;
		commandEnable: (params: { type: string; name: string }) => string;
		commandEnableDescription: string;
		commandDisable: (params: { type: string; name: string }) => string;
		commandDisableDescription: string;
		commandDisableWarn: string;
		commandConfNoKey: string;
		commandConfNoValue: string;
		commandConfGuarded: (params: { name: string }) => string;
		commandConfUpdated: (params: { key: string; response: string }) => string;
		commandConfKeyNotArray: string;
		commandConfGetNoExt: (params: { key: string }) => string;
		commandConfGet: (params: { key: string; value: string }) => string;
		commandConfReset: (params: { key: string; value: string }) => string;
		commandConfNochange: (params: { key: string }) => string;
		commandConfServerDescription: string;
		commandConfServer: (params: { key: string; list: string }) => string;
		commandConfUserDescription: string;
		commandConfUser: (params: { key: string; list: string }) => string;
		commandConfSettingNotSet: string;
		messagePromptTimeout: string;
		textPromptAbortOptions: readonly string[];
		commandLoad: (params: { time: string; type: string; name: string }) => string;
		commandLoadFail: string;
		commandLoadError: (params: { type: string; name: string; error: string }) => string;
		commandLoadDescription: string;
		argumentRangeInvalid: (params: { name: string }) => string;
		argumentRangeMax: (params: { name: string; maximum: number; count: number }) => string;
		argumentRangeMaxPlural: (params: { name: string; maximum: number; count: number }) => string;
		commandAddDescription: string;
		commandAddExtended: LanguageHelpDisplayOptions;
		commandAddPlaylist: (params: { songs: string }) => string;
		commandAddPlaylistSongs: (params: { count: number }) => string;
		commandAddPlaylistSongsPlural: (params: { count: number }) => string;
		commandAddSong: (params: { title: string }) => string;
		commandClearDescription: string;
		commandClearDenied: string;
		commandClearSuccess: (params: { count: number }) => string;
		commandClearSuccessPlural: (params: { count: number }) => string;
		commandExportQueueDescription: string;
		commandExportQueueExtended: LanguageHelpDisplayOptions;
		commandExportQueueSuccess: (params: { guildName: string }) => string;
		commandImportQueueDescription: string;
		commandImportQueueExtended: LanguageHelpDisplayOptions;
		commandJoinDescription: string;
		commandJoinNoMember: string;
		commandJoinNoVoicechannel: string;
		commandJoinSuccess: (params: { channel: string }) => string;
		commandJoinVoiceDifferent: string;
		commandJoinVoiceFull: string;
		commandJoinVoiceNoConnect: string;
		commandJoinVoiceNoSpeak: string;
		commandJoinVoiceSame: string;
		commandJoinFailed: string;
		commandLeaveDescription: string;
		commandLeaveExtended: LanguageHelpDisplayOptions;
		commandLeaveSuccess: (params: { channel: string }) => string;
		commandPauseDescription: string;
		commandPauseSuccess: string;
		commandPlayDescription: string;
		commandPlayExtended: LanguageHelpDisplayOptions;
		commandPlayEnd: string;
		commandPlayNext: (params: { title: string; requester: string }) => string;
		commandPlayQueuePaused: (params: { song: string }) => string;
		commandPlayQueuePlaying: string;
		commandPlayQueueEmpty: string;
		commandPlayingDescription: string;
		commandPlayingDuration: (params: { duration: string }) => string;
		commandPlayingQueueEmpty: string;
		commandPlayingQueueNotPlaying: string;
		commandRepeatDescription: string;
		commandRepeatSuccessEnabled: string;
		commandRepeatSuccessDisabled: string;
		commandQueueDescription: string;
		commandQueueLast: string;
		commandQueueTitle: (params: { guildname: string }) => string;
		commandQueueLine: (params: { position: number; duration: string; title: string; url: string; requester: string }) => string;
		commandQueueNowplaying: (context: { title: string; url: string; requester: string }) => string;
		commandQueueNowplayingTimeRemaining: (params: { timeRemaining: string }) => string;
		commandQueueNowplayingLiveStream: string;
		commandQueueNowplayingTitle: string;
		commandQueueTotalTitle: string;
		commandQueueTotal: (params: { songs: string; remainingTime: string }) => string;
		commandQueueEmpty: string;
		commandQueueDashboardInfo: (params: { guild: Guild }) => string;
		commandRemoveDescription: string;
		commandRemoveIndexInvalid: string;
		commandRemoveIndexOutOfBounds: (params: { songs: string }) => string;
		commandRemoveDenied: string;
		commandRemoveSuccess: (params: { title: string; requester: string }) => string;
		commandSeekDescription: string;
		commandSeekSuccess: (params: { time: number }) => string;
		commandResumeDescription: string;
		commandResumeSuccess: string;
		commandRolesetDescription: string;
		commandRolesetExtended: LanguageHelpDisplayOptions;
		commandRolesetCreated: (params: { name: string; roles: string }) => string;
		commandRolesetAdded: (params: { name: string; roles: string }) => string;
		commandRolesetInvalidName: (params: { name: string }) => string;
		commandRolesetRemoved: (params: { name: string; roles: string }) => string;
		commandRolesetResetEmpty: string;
		commandRolesetResetAll: string;
		commandRolesetResetNotExists: (params: { name: string }) => string;
		commandRolesetResetGroup: (params: { name: string }) => string;
		commandRolesetUpdated: (params: { name: string }) => string;
		commandRolesetNoRolesets: string;
		commandShuffleDescription: string;
		commandShuffleSuccess: (params: { amount: number }) => string;
		commandSkipDescription: string;
		commandSkipPermissions: string;
		commandSkipVotesVoted: string;
		commandSkipVotesTotal: (params: { amount: number; needed: number }) => string;
		commandSkipSuccess: (params: { title: string }) => string;
		commandSupportEmbedTitle: (params: { username: string }) => string;
		commandSupportEmbedDescription: string;
		commandPlayingTimeDescription: string;
		commandPlayingTimeQueueEmpty: string;
		commandPromoteDescription: string;
		commandPromoteExtended: LanguageHelpDisplayOptions;
		commandPromoteSuccess: (params: { title: string; url: string }) => string;
		commandVolumeDescription: string;
		commandVolumeSuccess: (params: { volume: number }) => string;
		commandVolumeChanged: (params: { emoji: string; volume: number }) => string;
		commandVolumeChangedExtreme: (params: { emoji: string; text: string; volume: number }) => string;
		commandVolumeChangedTexts: readonly string[];
		commandAbilityDescription: string;
		commandAbilityExtended: LanguageHelpDisplayOptions;
		commandAbilityEmbedTitle: string;
		commandAbilityQueryFail: (params: { ability: string }) => string;
		commandFlavorsDescription: string;
		commandFlavorsExtended: LanguageHelpDisplayOptions;
		commandFlavorsQueryFail: (params: { pokemon: string }) => string;
		commandItemDescription: string;
		commandItemExtended: LanguageHelpDisplayOptions;
		commandItemEmbedData: (params: {
			availableInGen8: string;
		}) => {
			ITEM: string;
			generationIntroduced: string;
			availableInGeneration8Title: string;
			availableInGeneration8Data: string;
		};
		commandItemQueryFail: (params: { item: string }) => string;
		commandLearnDescription: string;
		commandLearnExtended: LanguageHelpDisplayOptions;
		commandLearnMethodTypes: (params: {
			level?: number | null;
		}) => {
			levelUpMoves: string;
			eventMoves: string;
			tutorMoves: string;
			eggMoves: string;
			virtualTransferMoves: string;
			tmMoves: string;
			dreamworldMoves: string;
		};
		commandLearnInvalidGeneration: (params: { generation: string }) => string;
		commandLearnMethod: (params: { generation: number; pokemon: string; move: string; method: string }) => string;
		commandLearnQueryFailed: (params: { pokemon: string; moves: string }) => string;
		commandLearnCannotLearn: (params: { pokemon: string; moves: string }) => string;
		commandLearnTitle: (params: { pokemon: string; generation: number }) => string;
		commandMoveDescription: string;
		commandMoveExtended: LanguageHelpDisplayOptions;
		commandMoveEmbedData: (params: {
			availableInGen8: string;
		}) => {
			move: string;
			types: string;
			basePower: string;
			pp: string;
			category: string;
			accuracy: string;
			priority: string;
			target: string;
			contestCondition: string;
			zCrystal: string;
			gmaxPokemon: string;
			availableInGeneration8Title: string;
			availableInGeneration8Data: string;
			none: string;
			maxMovePower: string;
			zMovePower: string;
		};
		commandMoveQueryFail: (params: { move: string }) => string;
		commandPokedexDescription: string;
		commandPokedexExtended: LanguageHelpDisplayOptions;
		commandPokedexEmbedData: (params: {
			otherFormes: readonly string[];
			cosmeticFormes: readonly string[];
		}) => {
			types: string;
			abilities: string;
			genderRatio: string;
			smogonTier: string;
			uknownSmogonTier: string;
			height: string;
			weight: string;
			eggGroups: string;
			evolutionaryLine: string;
			baseStats: string;
			baseStatsTotal: string;
			flavourText: string;
			otherFormesTitle: string;
			cosmeticFormesTitle: string;
			otherFormesList: string;
			cosmeticFormesList: string;
		};
		commandPokedexQueryFail: (params: { pokemon: string }) => string;
		commandTypeDescription: string;
		commandTypeExtended: LanguageHelpDisplayOptions;
		commandTypeEmbedData: (params: {
			types: string[];
		}) => {
			offensive: string;
			defensive: string;
			superEffectiveAgainst: string;
			dealsNormalDamageTo: string;
			doesNotAffect: string;
			notVeryEffectiveAgainst: string;
			vulnerableTo: string;
			takesNormalDamageFrom: string;
			resists: string;
			notAffectedBy: string;
			typeEffectivenessFor: string;
		};
		commandTypeTooManyTypes: string;
		commandTypeNotAType: (params: { type: string }) => string;
		commandTypeQueryFail: (params: { types: string }) => string;
		inhibitorMusicQueueEmpty: string;
		inhibitorMusicNotPlaying: string;
		inhibitorMusicPaused: string;
		inhibitorMusicDjMember: string;
		inhibitorMusicUserVoiceChannel: string;
		inhibitorMusicBotVoiceChannel: string;
		inhibitorMusicBothVoiceChannel: string;
		inhibitorMusicNothingPlaying: string;
		musicManagerFetchNoArguments: string;
		musicManagerFetchNoMatches: string;
		musicManagerFetchLoadFailed: string;
		musicManagerImportQueueNotFound: string;
		musicManagerImportQueueError: string;
		musicManagerTooManySongs: string;
		musicManagerSetvolumeSilent: string;
		musicManagerSetvolumeLoud: string;
		musicManagerPlayNoSongs: string;
		musicManagerPlayPlaying: string;
		musicManagerStuck: (params: { milliseconds: number }) => string;
		commandConfMenuNopermissions: string;
		commandConfMenuRenderAtFolder: (params: { path: string }) => string;
		commandConfMenuRenderAtPiece: (params: { path: string }) => string;
		commandConfMenuRenderNokeys: string;
		commandConfMenuRenderSelect: string;
		commandConfMenuRenderTctitle: string;
		commandConfMenuRenderUpdate: string;
		commandConfMenuRenderRemove: string;
		commandConfMenuRenderReset: string;
		commandConfMenuRenderUndo: string;
		commandConfMenuRenderCvalue: (params: { value: string }) => string;
		commandConfMenuRenderBack: string;
		commandConfMenuInvalidKey: string;
		commandConfMenuInvalidAction: string;
		commandConfMenuSaved: string;
		settingsPrefix: string;
		settingsLanguage: string;
		settingsDisabledcommands: string;
		settingsDisablenaturalprefix: string;
		settingsChannelsAnnouncements: string;
		settingsChannelsFarewell: string;
		settingsChannelsGreeting: string;
		settingsChannelsImageLogs: string;
		settingsChannelsMemberLogs: string;
		settingsChannelsMessageLogs: string;
		settingsChannelsModerationLogs: string;
		settingsChannelsNsfwMessageLogs: string;
		settingsChannelsPruneLogs: string;
		settingsChannelsReactionLogs: string;
		settingsChannelsRoles: string;
		settingsChannelsSpam: string;
		settingsChannelsIgnoreMessageDelete: string;
		settingsChannelsIgnoreMessageEdit: string;
		settingsChannelsIgnoreReactionAdd: string;
		settingsChannelsIgnoreAll: string;
		settingsDisabledchannels: string;
		settingsEventsBanadd: string;
		settingsEventsBanremove: string;
		settingsEventsMemberadd: string;
		settingsEventsMembernameupdate: string;
		settingsEventsMemberremove: string;
		settingsEventsMessagedelete: string;
		settingsEventsMessageedit: string;
		settingsEventsTwemojiReactions: string;
		settingsMessagesFarewell: string;
		settingsMessagesGreeting: string;
		settingsMessagesIgnorechannels: string;
		settingsMessagesJoinDm: string;
		settingsMessagesModerationAutoDelete: string;
		settingsMessagesModerationDm: string;
		settingsMessagesModerationMessageDisplay: string;
		settingsMessagesModerationReasonDisplay: string;
		settingsMessagesModeratorNameDisplay: string;
		settingsMessagesWarnings: string;
		settingsMessagesAnnouncementEmbed: string;
		settingsMusicAllowStreams: string;
		settingsMusicDefaultVolume: string;
		settingsMusicMaximumDuration: string;
		settingsMusicMaximumEntriesPerUser: string;
		settingsNoMentionSpamAlerts: string;
		settingsNoMentionSpamEnabled: string;
		settingsNoMentionSpamMentionsallowed: string;
		settingsNoMentionSpamTimeperiod: string;
		settingsRolesAdmin: string;
		settingsRolesDj: string;
		settingsRolesInitial: string;
		settingsRolesModerator: string;
		settingsRolesMuted: string;
		settingsRolesPublic: string;
		settingsRolesRemoveinitial: string;
		settingsRolesRestrictedAttachment: string;
		settingsRolesRestrictedEmbed: string;
		settingsRolesRestrictedEmoji: string;
		settingsRolesRestrictedReaction: string;
		settingsRolesRestrictedVoice: string;
		settingsRolesSubscriber: string;
		settingsSelfmodAttachment: string;
		settingsSelfmodAttachmentmaximum: string;
		settingsSelfmodCapitalsEnabled: string;
		settingsSelfmodCapitalsIgnoredchannels: string;
		settingsSelfmodCapitalsIgnoredroles: string;
		settingsSelfmodCapitalsMaximum: string;
		settingsSelfmodCapitalsMinimum: string;
		settingsSelfmodFilterEnabled: string;
		settingsSelfmodFilterIgnoredchannels: string;
		settingsSelfmodFilterIgnoredroles: string;
		settingsSelfmodIgnorechannels: string;
		settingsSelfmodInvitesEnabled: string;
		settingsSelfmodInvitesIgnoredchannels: string;
		settingsSelfmodInvitesIgnoredroles: string;
		settingsSelfmodInvitesIgnoredcodes: string;
		settingsSelfmodInvitesIgnoredguilds: string;
		settingsSelfmodLinksEnabled: string;
		settingsSelfmodLinksIgnoredchannels: string;
		settingsSelfmodLinksIgnoredroles: string;
		settingsSelfmodLinksWhitelist: string;
		settingsSelfmodMessagesEnabled: string;
		settingsSelfmodMessagesIgnoredchannels: string;
		settingsSelfmodMessagesIgnoredroles: string;
		settingsSelfmodMessagesMaximum: string;
		settingsSelfmodMessagesQueueSize: string;
		settingsSelfmodNewlinesEnabled: string;
		settingsSelfmodNewlinesIgnoredchannels: string;
		settingsSelfmodNewlinesIgnoredroles: string;
		settingsSelfmodNewlinesMaximum: string;
		settingsSelfmodRaid: string;
		settingsSelfmodRaidthreshold: string;
		settingsSelfmodReactionsMaximum: string;
		settingsSelfmodReactionsBlacklist: string;
		settingsSelfmodReactionsEnabled: string;
		settingsSelfmodReactionsIgnoredchannels: string;
		settingsSelfmodReactionsIgnoredroles: string;
		settingsSelfmodReactionsWhitelist: string;
		settingsSocialEnabled: string;
		settingsSocialMultiplier: string;
		settingsSocialAchieve: string;
		settingsSocialAchievemessage: string;
		settingsSocialIgnorechannels: string;
		settingsStarboardChannel: string;
		settingsStarboardIgnorechannels: string;
		settingsStarboardMinimum: string;
		settingsStarboardSelfstar: string;
		settingsSuggestionsChannel: string;
		settingsSuggestionsEmojisUpvote: string;
		settingsSuggestionsEmojisDownvote: string;
		settingsSuggestionsOnActionDm: string;
		settingsSuggestionsOnActionRepost: string;
		settingsSuggestionsOnActionHideAuthor: string;
		commandCatfactDescription: string;
		commandCatfactExtended: LanguageHelpDisplayOptions;
		commandDogDescription: string;
		commandDogExtended: LanguageHelpDisplayOptions;
		commandFoxDescription: string;
		commandFoxExtended: LanguageHelpDisplayOptions;
		commandKittyDescription: string;
		commandKittyExtended: LanguageHelpDisplayOptions;
		commandShibeDescription: string;
		commandShibeExtended: LanguageHelpDisplayOptions;
		commandAnimeDescription: string;
		commandAnimeExtended: LanguageHelpDisplayOptions;
		commandMangaDescription: string;
		commandMangaExtended: LanguageHelpDisplayOptions;
		commandWaifuDescription: string;
		commandWaifuExtended: LanguageHelpDisplayOptions;
		commandAnnouncementDescription: string;
		commandAnnouncementExtended: LanguageHelpDisplayOptions;
		commandSubscribeDescription: string;
		commandSubscribeExtended: LanguageHelpDisplayOptions;
		commandUnsubscribeDescription: string;
		commandUnsubscribeExtended: LanguageHelpDisplayOptions;
		commandChoiceDescription: string;
		commandChoiceExtended: LanguageHelpDisplayOptions;
		commandChangemymindDescription: string;
		commandChangemymindExtended: LanguageHelpDisplayOptions;
		commandDiceDescription: string;
		commandDiceExtended: LanguageHelpDisplayOptions;
		commandEscaperopeDescription: string;
		commandEscaperopeExtended: LanguageHelpDisplayOptions;
		commandHowToFlirtDescription: string;
		commandHowToFlirtExtended: LanguageHelpDisplayOptions;
		commandLoveDescription: string;
		commandLoveExtended: LanguageHelpDisplayOptions;
		commandMarkovTimer: (params: { timer: string }) => string;
		commandMarkovNoMessages: string;
		commandMarkovDescription: string;
		commandMarkovExtended: LanguageHelpDisplayOptions;
		commandNorrisDescription: string;
		commandNorrisExtended: LanguageHelpDisplayOptions;
		commandRateDescription: string;
		commandRateExtended: LanguageHelpDisplayOptions;
		commandXkcdDescription: string;
		commandXkcdExtended: LanguageHelpDisplayOptions;
		commandPunDescription: string;
		commandPunExtended: LanguageHelpDisplayOptions;
		commandWakandaDescription: string;
		commandWakandaExtended: LanguageHelpDisplayOptions;
		// GI commands
		commandBrawlstarsDescription: string;
		commandBrawlstarsExtended: LanguageHelpDisplayOptions;
		commandBrawlstarsPlayerEmbedTitles: {
			trophies: string;
			exp: string;
			events: string;
			gamesModes: string;
			other: string;
		};
		commandBrawlstarsPlayerEmbedFields: {
			total: string;
			personalBest: string;
			experienceLevel: string;
			events: string;
			roboRumble: string;
			qualifiedForChamps: string;
			victories3v3: string;
			victoriesDuo: string;
			victoriesSolo: string;
			club: string;
			brawlersUnlocked: string;
		};
		commandBrawlstarsClubEmbedTitles: {
			totalTrophies: string;
			averageTrophies: string;
			requiredTrophies: string;
			members: string;
			type: string;
			top5Members: string;
			president: string;
		};
		commandBrawlstarsClubEmbedFields: {
			noPresident: string;
		};
		commandClashofclansDescription: string;
		commandClashofclansExtended: LanguageHelpDisplayOptions;
		commandClashofclansPlayerEmbedTitles: {
			xpLevel: string;
			builderHallLevel: string;
			townhallLevel: string;
			townhallWeaponLevel: string;
			trophies: string;
			bestTrophies: string;
			warStars: string;
			attackWins: string;
			defenseWins: string;
			amountOfAchievements: string;
			versusTrophies: string;
			bestVersusTrophies: string;
			versusBattleWins: string;
			clanRole: string;
			clanName: string;
			leagueName: string;
			noTownhallWeaponLevel: string;
			noRole: string;
			noClan: string;
			noLeague: string;
		};
		commandClashofclansClanEmbedTitles: {
			clanLevel: string;
			clanPoints: string;
			clanVersusPoints: string;
			amountOfMembers: string;
			description: string;
			locationName: string;
			warFrequency: string;
			warWinStreak: string;
			warWins: string;
			warTies: string;
			warLosses: string;
			warLogPublic: string;
			unknown: string;
			warFrequencyDescr: {
				moreThanOncePerWeek: string;
				unknown: string;
				always: string;
				oncePerWeek: string;
				lessThanOncePerWeek: string;
			};
		};
		commandBrawlStarsInvalidPlayerTag: (params: { playertag: string }) => string;
		commandBrawlStarsClansQueryFail: (params: { clan: string }) => string;
		commandBrawlStarsPlayersQueryFail: (params: { playertag: string }) => string;
		commandClashofclansInvalidPlayerTag: (params: { playertag: string }) => string;
		commandClashOfClansClansQueryFail: (params: { clan: string }) => string;
		commandClashofclansPlayersQueryFail: (params: { playertag: string }) => string;
		commandFFXIVDescription: string;
		commandFFXIVExtended: LanguageHelpDisplayOptions;
		commandFFXIVCharacterFields: {
			serverAndDc: string;
			tribe: string;
			characterGender: string;
			nameday: string;
			guardian: string;
			cityState: string;
			grandCompany: string;
			rank: string;
			none: string;
			male: string;
			female: string;
			dowDomClasses: string;
			tank: string;
			healer: string;
			meleeDps: string;
			physicalRangedDps: string;
			magicalRangedDps: string;
			dohClasses: string;
			dolClasses: string;
		};
		commandFFXIVItemFields: {
			kind: string;
			category: string;
			levelEquip: string;
			none: string;
		};
		commandFFXIVNoCharacterFound: string;
		commandFFXIVInvalidServer: string;
		commandFFXIVNoItemFound: string;
		commandFortniteDescription: string;
		commandFortniteExtended: LanguageHelpDisplayOptions;
		commandFortniteNoUser: string;
		commandFortniteEmbedTitle: (params: { epicUserHandle: string }) => string;
		commandFortniteEmbedSectionTitles: {
			lifetimeStats: string;
			solos: string;
			duos: string;
			squads: string;
		};
		commandFortniteEmbedStats: (params: {
			winCount: string;
			killCount: string;
			kdrCount: string;
			matchesPlayedCount: string;
			top1Count: string;
			top3Count: string;
			top5Count: string;
			top6Count: string;
			top10Count: string;
			top12Count: string;
			top25Count: string;
		}) => {
			wins: string;
			kills: string;
			kdr: string;
			matchesPlayed: string;
			top1s: string;
			top3s: string;
			top5s: string;
			top6s: string;
			top10s: string;
			top12s: string;
			top25s: string;
		};
		commandOverwatchDescription: string;
		commandOverwatchExtended: LanguageHelpDisplayOptions;
		commandOverwatchInvalidPlayerName: (params: { playerTag: string }) => string;
		commandOverwatchQueryFail: (params: { player: string; platform: string }) => string;
		commandOverwatchNoStats: (params: { player: string }) => string;
		commandOverwatchNoAverage: string;
		commandOverwatchEmbedDataStats: (params: {
			finalBlows: number;
			deaths: number;
			damageDone: number;
			healing: number;
			objectiveKills: number;
			soloKills: number;
			playTime: number;
			gamesWon: number;
			goldenMedals: number;
			silverMedals: number;
			bronzeMedals: number;
		}) => {
			finalBlows: string;
			deaths: string;
			damageDealt: string;
			healing: string;
			objectiveKills: string;
			soloKills: string;
			playTime: string;
			gamesWon: string;
			goldenMedals: string;
			silverMedals: string;
			bronzeMedals: string;
		};
		commandOverwatchEmbedDataTopHero: (params: { name: string; playTime: string }) => string;
		commandOverwatchEmbedData: (params: {
			authorName: string;
			playerLevel: number;
			prestigeLevel: number;
			totalGamesWon: number;
		}) => {
			title: string;
			ratingsTitle: string;
			author: string;
			playerLevel: string;
			prestigeLevel: string;
			totalGamesWon: string;
			noGamesWon: string;
			headers: {
				account: string;
				quickplay: string;
				competitive: string;
				topHeroesQuickplay: string;
				topHeroesCompetitive: string;
			};
		};
		gamesNotEnoughMoney: (params: { money: number }) => string;
		gamesCannotHaveNegativeMoney: string;
		commandCreateMuteDescription: string;
		commandCreateMuteExtended: LanguageHelpDisplayOptions;
		commandGiveawayDescription: string;
		commandGiveawayExtended: LanguageHelpDisplayOptions;
		commandGiveawayRerollDescription: string;
		commandGiveawayRerollExtended: LanguageHelpDisplayOptions;
		commandGiveawayScheduleDescription: string;
		commandGiveawayScheduleExtended: LanguageHelpDisplayOptions;
		commandCurrentTimeDescription: string;
		commandCurrentTimeExtended: LanguageHelpDisplayOptions;
		commandCurrentTimeLocationNotFound: string;
		commandCurrentTimeTitles: (params: {
			dst: string;
		}) => {
			currentTime: string;
			currentDate: string;
			country: string;
			gmsOffset: string;
			dst: string;
		};
		commandCurrentTimeDst: string;
		commandCurrentTimeNoDst: string;
		commandGsearchDescription: string;
		commandGsearchExtended: LanguageHelpDisplayOptions;
		commandGimageDescription: string;
		commandGimageExtended: LanguageHelpDisplayOptions;
		commandLmgtfyDescription: string;
		commandLmgtfyExtended: LanguageHelpDisplayOptions;
		commandLmgtfyClick: string;
		commandWeatherDescription: string;
		commandWeatherExtended: LanguageHelpDisplayOptions;
		googleErrorZeroResults: string;
		googleErrorRequestDenied: string;
		googleErrorInvalidRequest: string;
		googleErrorOverQueryLimit: string;
		googleErrorUnknown: string;
		commandNickDescription: string;
		commandNickExtended: LanguageHelpDisplayOptions;
		commandPermissionNodesDescription: string;
		commandPermissionNodesExtended: LanguageHelpDisplayOptions;
		commandTriggersDescription: string;
		commandTriggersExtended: LanguageHelpDisplayOptions;
		commandManagecommandautodeleteDescription: string;
		commandManagecommandautodeleteExtended: LanguageHelpDisplayOptions;
		commandManageCommandChannelDescription: string;
		commandManageCommandChannelExtended: LanguageHelpDisplayOptions;
		commandManageReactionRolesDescription: string;
		commandManageReactionRolesExtended: LanguageHelpDisplayOptions;
		commandSetIgnoreChannelsDescription: string;
		commandSetIgnoreChannelsExtended: LanguageHelpDisplayOptions;
		commandSetImageLogsDescription: string;
		commandSetImageLogsExtended: LanguageHelpDisplayOptions;
		commandSetMemberLogsDescription: string;
		commandSetMemberLogsExtended: LanguageHelpDisplayOptions;
		commandSetMessageLogsDescription: string;
		commandSetMessageLogsExtended: LanguageHelpDisplayOptions;
		commandSetmodlogsDescription: string;
		commandSetmodlogsExtended: LanguageHelpDisplayOptions;
		commandSetprefixDescription: string;
		commandSetprefixExtended: LanguageHelpDisplayOptions;
		commandSetrolechannelDescription: string;
		commandSetrolechannelExtended: LanguageHelpDisplayOptions;
		commandSetrolemessageDescription: string;
		commandSetrolemessageExtended: LanguageHelpDisplayOptions;
		commandSetStarboardEmojiDescription: string;
		commandSetStarboardEmojiExtended: LanguageHelpDisplayOptions;
		commandGiveawayRerollInvalid: string;
		commandRoleInfoDescription: string;
		commandRoleInfoExtended: LanguageHelpDisplayOptions;
		commandGuildInfoDescription: string;
		commandGuildInfoExtended: LanguageHelpDisplayOptions;
		commandStickyRolesDescription: string;
		commandStickyRolesExtended: LanguageHelpDisplayOptions;
		commandManageAttachmentsDescription: string;
		commandManageAttachmentsExtended: LanguageHelpDisplayOptions;
		commandCapitalsModeDescription: string;
		commandCapitalsModeExtended: LanguageHelpDisplayOptions;
		commandFilterDescription: string;
		commandFilterExtended: LanguageHelpDisplayOptions;
		commandFilterModeDescription: string;
		commandFilterModeExtended: LanguageHelpDisplayOptions;
		commandInviteModeDescription: string;
		commandInviteModeExtended: LanguageHelpDisplayOptions;
		commandLinkModeDescription: string;
		commandLinkModeExtended: LanguageHelpDisplayOptions;
		commandMessageModeDescription: string;
		commandMessageModeExtended: LanguageHelpDisplayOptions;
		commandNewlineModeDescription: string;
		commandNewlineModeExtended: LanguageHelpDisplayOptions;
		commandReactionModeDescription: string;
		commandReactionModeExtended: LanguageHelpDisplayOptions;
		commandCuddleDescription: string;
		commandCuddleExtended: LanguageHelpDisplayOptions;
		commandDeletthisDescription: string;
		commandDeletthisExtended: LanguageHelpDisplayOptions;
		commandFDescription: string;
		commandFExtended: LanguageHelpDisplayOptions;
		commandGoodnightDescription: string;
		commandGoodnightExtended: LanguageHelpDisplayOptions;
		commandGoofytimeDescription: string;
		commandGoofytimeExtended: LanguageHelpDisplayOptions;
		commandHugDescription: string;
		commandHugExtended: LanguageHelpDisplayOptions;
		commandIneedhealingDescription: string;
		commandIneedhealingExtended: LanguageHelpDisplayOptions;
		commandRandRedditDescription: string;
		commandRandRedditExtended: LanguageHelpDisplayOptions;
		commandChaseDescription: string;
		commandChaseExtended: LanguageHelpDisplayOptions;
		commandShindeiruDescription: string;
		commandShindeiruExtended: LanguageHelpDisplayOptions;
		commandPeepoloveDescription: string;
		commandPeepoloveExtended: LanguageHelpDisplayOptions;
		commandSlapDescription: string;
		commandSlapExtended: LanguageHelpDisplayOptions;
		commandSnipeDescription: string;
		commandSnipeExtended: LanguageHelpDisplayOptions;
		commandThesearchDescription: string;
		commandThesearchExtended: LanguageHelpDisplayOptions;
		commandTriggeredDescription: string;
		commandTriggeredExtended: LanguageHelpDisplayOptions;
		commandUpvoteDescription: string;
		commandUpvoteExtended: LanguageHelpDisplayOptions;

		commandSetNicknameDescription: string;
		commandSetNicknameExtended: LanguageHelpDisplayOptions;
		commandAddRoleDescription: string;
		commandAddRoleExtended: LanguageHelpDisplayOptions;
		commandRemoveroleDescription: string;
		commandRemoveroleExtended: LanguageHelpDisplayOptions;
		commandSlowmodeDescription: string;
		commandSlowmodeExtended: LanguageHelpDisplayOptions;
		commandBanDescription: string;
		commandBanExtended: LanguageHelpDisplayOptions;
		commandDehoistDescription: string;
		commandDehoistExtended: LanguageHelpDisplayOptions;
		commandKickDescription: string;
		commandKickExtended: LanguageHelpDisplayOptions;
		commandLockdownDescription: string;
		commandLockdownExtended: LanguageHelpDisplayOptions;
		commandMuteDescription: string;
		commandMuteExtended: LanguageHelpDisplayOptions;
		commandPruneDescription: string;
		commandPruneExtended: LanguageHelpDisplayOptions;
		commandCaseDescription: string;
		commandCaseExtended: LanguageHelpDisplayOptions;
		commandRaidDescription: string;
		commandRaidExtended: LanguageHelpDisplayOptions;
		commandPermissionsDescription: string;
		commandPermissionsExtended: LanguageHelpDisplayOptions;
		commandFlowDescription: string;
		commandFlowExtended: LanguageHelpDisplayOptions;
		commandReasonDescription: string;
		commandReasonExtended: LanguageHelpDisplayOptions;
		commandRestrictAttachmentDescription: string;
		commandRestrictAttachmentExtended: LanguageHelpDisplayOptions;
		commandRestrictEmbedDescription: string;
		commandRestrictEmbedExtended: LanguageHelpDisplayOptions;
		commandRestrictEmojiDescription: string;
		commandRestrictEmojiExtended: LanguageHelpDisplayOptions;
		commandRestrictReactionDescription: string;
		commandRestrictReactionExtended: LanguageHelpDisplayOptions;
		commandRestrictVoiceDescription: string;
		commandRestrictVoiceExtended: LanguageHelpDisplayOptions;
		commandSoftBanDescription: string;
		commandSoftBanExtended: LanguageHelpDisplayOptions;
		commandToggleModerationDmDescription: string;
		commandToggleModerationDmExtended: LanguageHelpDisplayOptions;
		commandUnbanDescription: string;
		commandUnbanExtended: LanguageHelpDisplayOptions;
		commandUnmuteDescription: string;
		commandUnmuteExtended: LanguageHelpDisplayOptions;
		commandUnrestrictAttachmentDescription: string;
		commandUnrestrictAttachmentExtended: LanguageHelpDisplayOptions;
		commandUnrestrictEmbedDescription: string;
		commandUnrestrictEmbedExtended: LanguageHelpDisplayOptions;
		commandUnrestrictEmojiDescription: string;
		commandUnrestrictEmojiExtended: LanguageHelpDisplayOptions;
		commandUnrestrictReactionDescription: string;
		commandUnrestrictReactionExtended: LanguageHelpDisplayOptions;
		commandUnrestrictVoiceDescription: string;
		commandUnrestrictVoiceExtended: LanguageHelpDisplayOptions;
		commandUnwarnDescription: string;
		commandUnwarnExtended: LanguageHelpDisplayOptions;
		commandVmuteDescription: string;
		commandVmuteExtended: LanguageHelpDisplayOptions;
		commandVoiceKickDescription: string;
		commandVoiceKickExtended: LanguageHelpDisplayOptions;
		commandVunmuteDescription: string;
		commandVunmuteExtended: LanguageHelpDisplayOptions;
		commandWarnDescription: string;
		commandWarnExtended: LanguageHelpDisplayOptions;
		commandSocialDescription: string;
		commandSocialExtended: LanguageHelpDisplayOptions;
		commandBannerDescription: string;
		commandBannerExtended: LanguageHelpDisplayOptions;
		commandToggleDarkModeDescription: string;
		commandToggleDarkModeExtended: LanguageHelpDisplayOptions;
		commandAutoRoleDescription: string;
		commandAutoRoleExtended: LanguageHelpDisplayOptions;
		commandBalanceDescription: string;
		commandBalanceExtended: LanguageHelpDisplayOptions;
		commandDailyDescription: string;
		commandDailyExtended: LanguageHelpDisplayOptions;
		commandLeaderboardDescription: string;
		commandLeaderboardExtended: LanguageHelpDisplayOptions;
		commandLevelDescription: string;
		commandLevelExtended: LanguageHelpDisplayOptions;
		commandDivorceDescription: string;
		commandDivorceExtended: LanguageHelpDisplayOptions;
		commandMarryDescription: string;
		commandMarryExtended: LanguageHelpDisplayOptions;
		commandMylevelDescription: string;
		commandMylevelExtended: LanguageHelpDisplayOptions;
		commandPayDescription: string;
		commandPayExtended: LanguageHelpDisplayOptions;
		commandProfileDescription: string;
		commandProfileExtended: LanguageHelpDisplayOptions;
		commandRemindmeDescription: string;
		commandRemindmeExtended: LanguageHelpDisplayOptions;
		commandReputationDescription: string;
		commandReputationExtended: LanguageHelpDisplayOptions;
		commandSetColorDescription: string;
		commandSetColorExtended: LanguageHelpDisplayOptions;
		commandStarDescription: string;
		commandStarExtended: LanguageHelpDisplayOptions;
		commandSuggestDescription: string;
		commandSuggestExtended: LanguageHelpDisplayOptions;
		commandResolveSuggestionDescription: string;
		commandResolveSuggestionExtended: LanguageHelpDisplayOptions;
		commandDmDescription: string;
		commandDmExtended: LanguageHelpDisplayOptions;
		commandEvalDescription: string;
		commandEvalExtended: LanguageHelpDisplayOptions;
		commandExecDescription: string;
		commandExecExtended: LanguageHelpDisplayOptions;
		commandSetAvatarDescription: string;
		commandSetAvatarExtended: LanguageHelpDisplayOptions;
		commandDonateDescription: string;
		commandDonateExtended: LanguageHelpDisplayOptions;
		commandEchoDescription: string;
		commandEchoExtended: LanguageHelpDisplayOptions;
		commandFeedbackDescription: string;
		commandFeedbackExtended: LanguageHelpDisplayOptions;
		commandStatsDescription: string;
		commandStatsExtended: LanguageHelpDisplayOptions;
		commandAvatarDescription: string;
		commandAvatarExtended: LanguageHelpDisplayOptions;
		commandColorDescription: string;
		commandColorExtended: LanguageHelpDisplayOptions;
		commandContentDescription: string;
		commandContentExtended: LanguageHelpDisplayOptions;
		commandEmojiDescription: string;
		commandEmojiExtended: LanguageHelpDisplayOptions;
		commandCountryDescription: string;
		commandCountryExtended: LanguageHelpDisplayOptions;
		commandCountryTitles: {
			OVERVIEW: string;
			LANGUAGES: string;
			OTHER: string;
		};
		commandCountryFields: {
			overview: {
				officialName: string;
				capital: string;
				population: string;
			};
			other: {
				demonym: string;
				area: string;
				currencies: string;
			};
		};
		commandEshopDescription: string;
		commandEshopExtended: LanguageHelpDisplayOptions;
		commandEshopNotInDatabase: string;
		commandEshopTitles: {
			price: string;
			availability: string;
			releaseDate: string;
			numberOfPlayers: string;
			platform: string;
			categories: string;
			noCategories: string;
			nsuid: 'NSUID';
			esrb: 'ESRB';
		};
		commandEshopPricePaid: (params: { price: number }) => string;
		commandEshopPriceFree: string;
		commandHoroscopeDescription: string;
		commandHoroscopeExtended: LanguageHelpDisplayOptions;
		commandHoroscopeInvalidSunsign: (params: { sign: string; maybe: string }) => string;
		commandHoroscopeTitles: (params: {
			sign: string;
			intensity: string;
			keywords: readonly string[];
			mood: string;
			rating: string;
		}) => {
			dailyHoroscope: string;
			metadataTitle: string;
			metadata: readonly string[];
		};
		commandIgdbDescription: string;
		commandIgdbExtended: LanguageHelpDisplayOptions;
		commandIgdbTitles: {
			userScore: string;
			ageRating: string;
			releaseDate: string;
			genres: string;
			developers: string;
			platform: string;
		};
		commandIgdbData: {
			noDevelopers: string;
			noPlatforms: string;
			noReleaseDate: string;
			noRating: string;
			noSummary: string;
			noAgeRatings: string;
			noGenres: string;
		};
		commandItunesDescription: string;
		commandItunesExtended: LanguageHelpDisplayOptions;
		commandItunesTitles: {
			artist: string;
			collection: string;
			collectionPrice: string;
			trackPrice: string;
			trackReleaseDate: string;
			numberOfTracksInCollection: string;
			primaryGenre: string;
			preview: string;
			previewLabel: string;
		};
		commandMoviesDescription: string;
		commandMoviesExtended: LanguageHelpDisplayOptions;
		commandMoviesTitles: {
			runtime: string;
			userScore: string;
			status: string;
			releaseDate: string;
			imdbPage: string;
			homePage: string;
			collection: string;
			genres: string;
		};
		commandMoviesData: {
			variableRuntime: string;
			movieInProduction: string;
			linkClickHere: string;
			none: string;
			notPartOfCollection: string;
			noGenres: string;
		};
		commandShowsDescription: string;
		commandShowsExtended: LanguageHelpDisplayOptions;
		commandShowsTitles: {
			episodeRuntime: string;
			userScore: string;
			status: string;
			firstAirDate: string;
			genres: string;
		};
		commandShowsData: {
			variableRuntime: string;
			unknownUserScore: string;
			noGenres: string;
		};
		commandPriceDescription: string;
		commandPriceExtended: LanguageHelpDisplayOptions;
		commandQuoteDescription: string;
		commandQuoteExtended: LanguageHelpDisplayOptions;
		commandRolesDescription: string;
		commandRolesExtended: LanguageHelpDisplayOptions;
		commandDuckDuckGoDescription: string;
		commandDuckDuckGoExtended: LanguageHelpDisplayOptions;
		commandPollDescription: string;
		commandPollExtended: LanguageHelpDisplayOptions;
		commandPollReactionLimit: string;
		commandVoteDescription: string;
		commandVoteExtended: LanguageHelpDisplayOptions;
		commandTopInvitesDescription: string;
		commandTopInvitesExtended: LanguageHelpDisplayOptions;
		commandTopInvitesNoInvites: string;
		commandTopInvitesTop10InvitesFor: (params: { guild: Guild }) => string;
		commandTopInvitesEmbedData: {
			channel: string;
			link: string;
			createdAt: string;
			createdAtUnknown: string;
			expiresIn: string;
			neverExpress: string;
			temporary: string;
			uses: string;
		};
		commandUrbanDescription: string;
		commandUrbanExtended: LanguageHelpDisplayOptions;
		commandWhoisDescription: string;
		commandWhoisExtended: LanguageHelpDisplayOptions;
		commandFollowageDescription: string;
		commandFollowageExtended: LanguageHelpDisplayOptions;
		commandTwitchDescription: string;
		commandTwitchExtended: LanguageHelpDisplayOptions;
		commandTwitchSubscriptionDescription: string;
		commandTwitchSubscriptionExtended: LanguageHelpDisplayOptions;
		commandWikipediaDescription: string;
		commandWikipediaExtended: LanguageHelpDisplayOptions;
		commandYoutubeDescription: string;
		commandYoutubeExtended: LanguageHelpDisplayOptions;
		commandWbangDescription: string;
		commandWbangExtended: LanguageHelpDisplayOptions;
		commandWbangheadDescription: string;
		commandWbangheadExtended: LanguageHelpDisplayOptions;
		commandWbiteDescription: string;
		commandWbiteExtended: LanguageHelpDisplayOptions;
		commandWblushDescription: string;
		commandWblushExtended: LanguageHelpDisplayOptions;
		commandWcryDescription: string;
		commandWcryExtended: LanguageHelpDisplayOptions;
		commandWcuddleDescription: string;
		commandWcuddleExtended: LanguageHelpDisplayOptions;
		commandWdanceDescription: string;
		commandWdanceExtended: LanguageHelpDisplayOptions;
		commandWgreetDescription: string;
		commandWgreetExtended: LanguageHelpDisplayOptions;
		commandWhugDescription: string;
		commandWhugExtended: LanguageHelpDisplayOptions;
		commandWkissDescription: string;
		commandWkissExtended: LanguageHelpDisplayOptions;
		commandWlewdDescription: string;
		commandWlewdExtended: LanguageHelpDisplayOptions;
		commandWlickDescription: string;
		commandWlickExtended: LanguageHelpDisplayOptions;
		commandWnomDescription: string;
		commandWnomExtended: LanguageHelpDisplayOptions;
		commandWnekoDescription: string;
		commandWnekoExtended: LanguageHelpDisplayOptions;
		commandWpatDescription: string;
		commandWpatExtended: LanguageHelpDisplayOptions;
		commandWpoutDescription: string;
		commandWpoutExtended: LanguageHelpDisplayOptions;
		commandWpunchDescription: string;
		commandWpunchExtended: LanguageHelpDisplayOptions;
		commandWslapDescription: string;
		commandWslapExtended: LanguageHelpDisplayOptions;
		commandWsleepyDescription: string;
		commandWsleepyExtended: LanguageHelpDisplayOptions;
		commandWsmileDescription: string;
		commandWsmileExtended: LanguageHelpDisplayOptions;
		commandWsmugDescription: string;
		commandWsmugExtended: LanguageHelpDisplayOptions;
		commandWstareDescription: string;
		commandWstareExtended: LanguageHelpDisplayOptions;
		commandWthumbsupDescription: string;
		commandWthumbsupExtended: LanguageHelpDisplayOptions;
		commandWtickleDescription: string;
		commandWtickleExtended: LanguageHelpDisplayOptions;
		commandWeebUnavailableError: string;
		commandWeebUnexpectedError: string;
		commandAnimeTypes: {
			tv: string;
			movie: string;
			ova: string;
			special: string;
			[index: string]: string;
		};
		commandAnimeInvalidChoice: string;
		commandAnimeOutputDescription: (params: { englishTitle: string; japaneseTitle: string; canonicalTitle: string; synopsis: string }) => string;
		commandAnimeNoSynopsis: string;
		commandAnimeEmbedData: {
			type: string;
			score: string;
			episodes: string;
			episodeLength: string;
			ageRating: string;
			firstAirDate: string;
			watchIt: string;
			stillAiring: string;
		};
		commandMangaOutputDescription: (params: { englishTitle: string; japaneseTitle: string; canonicalTitle: string; synopsis: string }) => string;
		commandMangaEmbedData: {
			type: string;
			score: string;
			ageRating: string;
			firstPublishDate: string;
			readIt: string;
			none: string;
		};
		commandMangaTypes: {
			manga: string;
			novel: string;
			manhwa: string;
			oneShot: string;
			special: string;
			[index: string]: string;
		};
		commandWaifuFooter: string;
		commandSubscribeNoRole: string;
		commandSubscribeSuccess: (params: { role: string }) => string;
		commandUnsubscribeSuccess: (params: { role: string }) => string;
		commandSubscribeNoChannel: string;
		commandAnnouncement: (params: { role: string }) => string;
		commandAnnouncementSuccess: string;
		commandAnnouncementCancelled: string;
		commandAnnouncementPrompt: string;
		commandAnnouncementEmbedMentions: (params: { header: string }) => string;
		commandAnnouncementEmbedMentionsWithMentions: (params: { header: string; mentions: string }) => string;
		commandInviteDescription: string;
		commandInviteExtended: LanguageHelpDisplayOptions;
		commandInvitePermissionInviteText: string;
		commandInvitePermissionSupportServerText: string;
		commandInvitePermissionsDescription: string;
		commandInfoBody: string[];
		commandHelpData: (params: {
			titleDescription: string;
			usage: string;
			extendedHelp: string;
			footerName: string;
		}) => {
			title: string;
			usage: string;
			extended: string;
			footer: string;
		};
		commandSupportDescription: string;
		commandSupportExtended: LanguageHelpDisplayOptions;
		commandYarnDescription: string;
		commandYarnExtended: LanguageHelpDisplayOptions;
		commandYarnNoPackage: string;
		commandYarnUnpublishedPackage: (params: { pkg: string }) => string;
		commandYarnPackageNotFound: (params: { pkg: string }) => string;
		commandYarnEmbedDescriptionAuthor: (params: { author: string }) => string;
		commandYarnEmbedDescriptionMaintainers: string;
		commandYarnEmbedDescriptionLatestVersion: (params: { latestVersionNumber: string }) => string;
		commandYarnEmbedDescriptionLicense: (params: { license: string }) => string;
		commandYarnEmbedDescriptionMainFile: (params: { mainFile: string }) => string;
		commandYarnEmbedDescriptionDateCreated: (params: { dateCreated: string }) => string;
		commandYarnEmbedDescriptionDateModified: (params: { dateModified: string }) => string;
		commandYarnEmbedDescriptionDeprecated: (params: { deprecated: string }) => string;
		commandYarnEmbedDescriptionDependenciesLabel: string;
		commandYarnEmbedDescriptionDependenciesNoDeps: string;
		commandYarnEmbedMoreText: string;
		command8ballDescription: string;
		command8ballExtended: LanguageHelpDisplayOptions;
		command8ballOutput: (params: { author: string; question: string; response: string }) => string;
		command8ballQuestions: EightBallLanguage;
		command8ballWhen: readonly string[];
		command8ballWhat: readonly string[];
		command8ballHowMuch: readonly string[];
		command8ballHowMany: readonly string[];
		command8ballWhy: readonly string[];
		command8ballWho: readonly string[];
		command8ballElse: readonly string[];
		commandCatfactTitle: string;
		commandChoiceOutput: (params: { user: string; word: string }) => string;
		commandChoiceMissing: string;
		commandChoiceDuplicates: (params: { words: string }) => string;
		commandDiceOutput: (params: { result: number }) => string;
		commandDiceRollsError: string;
		commandDiceSidesError: string;
		commandEscaperopeOutput: (params: { user: User }) => string;
		commandLoveLess45: string;
		commandLoveLess75: string;
		commandLoveLess100: string;
		commandLove100: string;
		commandLoveItself: string;
		commandLoveResult: string;
		commandNorrisOutput: string;
		commandPunError: string;
		commandRateOutput: (params: { author: string; userToRate: string; rate: number; emoji: string }) => string;
		commandRateMyself: [string, string];
		commandXkcdComics: (params: { amount: number }) => string;
		commandXkcdNotfound: string;
		commandGamesSkyra: string;
		commandGamesBot: string;
		commandGamesSelf: string;
		commandGamesProgress: string;
		commandGamesNoPlayers: (params: { prefix: string }) => string;
		commandGamesTooManyOrFew: (params: { min: number; max: number }) => string;
		commandGamesRepeat: string;
		commandGamesPromptTimeout: string;
		commandGamesPromptDeny: string;
		commandGamesTimeout: string;
		commandC4Description: string;
		commandC4Extended: LanguageHelpDisplayOptions;
		commandC4Prompt: (params: { challenger: string; challengee: string }) => string;
		commandC4Start: (params: { player: string }) => string;
		commandC4GameColumnFull: string;
		commandC4GameWin: (params: { user: string }) => string;
		commandC4GameWinTurn0: (params: { user: string }) => string;
		commandC4GameDraw: string;
		commandC4GameNext: (params: { user: string }) => string;
		commandC4GameNextTurn0: (params: { user: string }) => string;
		commandCoinFlipDescription: string;
		commandCoinFlipExtended: LanguageHelpDisplayOptions;
		commandCoinFlipInvalidCoinname: (params: { arg: string }) => string;
		commandCoinFlipCoinnames: string[];
		commandCoinFlipWinTitle: string;
		commandCoinFlipLoseTitle: string;
		commandCoinFlipNoguessTitle: string;
		commandCoinFlipWinDescription: (params: { result: string }) => string;
		commandCoinFlipWinDescriptionWithWager: (params: { result: string; wager: number }) => string;
		commandCoinFlipLoseDescription: (params: { result: string }) => string;
		commandCoinFlipLoseDescriptionWithWager: (params: { result: string; wager: number }) => string;
		commandCoinFlipNoguessDescription: (params: { result: string }) => string;
		commandHigherLowerDescription: string;
		commandHigherLowerExtended: LanguageHelpDisplayOptions;
		commandHigherLowerLoading: string;
		commandHigherLowerNewround: string;
		commandHigherLowerEmbed: (params: {
			turn: number;
			number: number;
		}) => {
			title: string;
			description: string;
			footer: string;
		};
		commandHigherLowerLose: (params: {
			number: number;
			losses: number;
		}) => {
			title: string;
			description: string;
			footer: string;
		};
		commandHigherLowerWin: (params: {
			potentials: number;
			number: number;
		}) => {
			title: string;
			description: string;
			footer: string;
		};
		commandHigherLowerCancel: (params: {
			username: string;
		}) => {
			title: string;
			description: string;
		};
		commandHigherLowerCashout: (params: { amount: number }) => string;
		commandHungerGamesDescription: string;
		commandHungerGamesExtended: LanguageHelpDisplayOptions;
		commandHungerGamesResultHeaderBloodbath: (params: { game: HungerGamesGame }) => string;
		commandHungerGamesResultHeaderSun: (params: { game: HungerGamesGame }) => string;
		commandHungerGamesResultHeaderMoon: (params: { game: HungerGamesGame }) => string;
		commandHungerGamesResultDeaths: (params: { deaths: number }) => string;
		commandHungerGamesResultDeathsPlural: (params: { deaths: number }) => string;
		commandHungerGamesResultProceed: string;
		commandHungerGamesStop: string;
		commandHungerGamesWinner: (params: { winner: string }) => string;
		commandSlotmachineDescription: string;
		commandSlotmachineExtended: LanguageHelpDisplayOptions;
		commandSlotmachinesWin: (params: { roll: string; winnings: number }) => string;
		commandSlotmachinesLoss: (params: { roll: string }) => string;
		commandSlotmachineTitles: {
			previous: string;
			new: string;
		};
		commandSlotmachineCanvasTextWon: string;
		commandSlotmachineCanvasTextLost: string;
		commandTicTacToeDescription: string;
		commandTicTacToeExtended: LanguageHelpDisplayOptions;
		commandWheelOfFortuneDescription: string;
		commandWheelOfFortuneExtended: LanguageHelpDisplayOptions;
		commandWheelOfFortuneCanvasTextWon: string;
		commandWheelOfFortuneCanvasTextLost: string;
		commandWheelOfFortuneTitles: {
			previous: string;
			new: string;
		};
		commandTicTacToePrompt: (params: { challenger: string; challengee: string }) => string;
		commandTicTacToeTurn: (params: { icon: string; player: string; board: string }) => string;
		commandTicTacToeWinner: (params: { winner: string; board: string }) => string;
		commandTicTacToeDraw: (params: { board: string }) => string;
		commandTriviaDescription: string;
		commandTriviaExtended: LanguageHelpDisplayOptions;
		commandTriviaInvalidCategory: string;
		commandTriviaActiveGame: string;
		commandTriviaIncorrect: (params: { attempt: string }) => string;
		commandTriviaNoAnswer: (params: { correctAnswer: string }) => string;
		commandTriviaEmbedTitles: {
			trivia: string;
			difficulty: string;
		};
		commandTriviaWinner: (params: { winner: string; correctAnswer: string }) => string;
		commandVaultDescription: string;
		commandVaultExtended: LanguageHelpDisplayOptions;
		commandVaultEmbedData: (params: {
			coins?: number;
		}) => {
			depositedDescription: string;
			withdrewDescription: string;
			showDescription: string;
			accountMoney: string;
			accountVault: string;
		};
		commandVaultInvalidCoins: string;
		commandVaultNotEnoughMoney: (params: { money: number }) => string;
		commandVaultNotEnoughInVault: (params: { vault: number }) => string;
		giveawayTime: string;
		giveawayTimeTooLong: string;
		giveawayEndsAt: string;
		giveawayDuration: (params: { time: number }) => string;
		giveawayTitle: string;
		giveawayLastchance: (params: { time: number }) => string;
		giveawayLastchanceTitle: string;
		giveawayEnded: (params: { winners: string; count: number }) => string;
		giveawayEndedPlural: (params: { winners: string; count: number }) => string;
		giveawayEndedNoWinner: string;
		giveawayEndedAt: string;
		giveawayEndedTitle: string;
		giveawayEndedMessage: (params: { winners: readonly string[]; title: string }) => string;
		giveawayEndedMessageNoWinner: (params: { title: string }) => string;
		giveawayScheduled: (params: { scheduledTime: number }) => string;
		commandNickSet: (params: { nickname: string }) => string;
		commandNickCleared: string;
		commandPermissionNodesHigher: string;
		commandPermissionNodesInvalidType: string;
		commandPermissionNodesAdd: string;
		commandPermissionNodesNodeNotExists: string;
		commandPermissionNodesCommandNotExists: string;
		commandPermissionNodesRemove: string;
		commandPermissionNodesReset: string;
		commandPermissionNodesShowName: (params: { name: string }) => string;
		commandPermissionNodesShowAllow: (params: { allow: string }) => string;
		commandPermissionNodesShowDeny: (params: { deny: string }) => string;
		commandTriggersNotype: string;
		commandTriggersNooutput: string;
		commandTriggersInvalidreaction: string;
		commandTriggersInvalidalias: string;
		commandTriggersRemoveNottaken: string;
		commandTriggersRemove: string;
		commandTriggersAddTaken: string;
		commandTriggersAdd: string;
		commandTriggersListEmpty: string;
		commandGuildInfoTitles: Record<string, string>;
		commandGuildInfoRoles: (params: { roles: string }) => string;
		commandGuildInfoNoroles: string;
		commandGuildInfoChannels: (params: { text: number; voice: number; categories: number; afkChannelText: string }) => string[];
		commandGuildInfoChannelsAfkChannelText: (params: { afkChannel: string; afkTime: number }) => string;
		commandGuildInfoMembers: (params: { count: string; owner: User }) => string[];
		commandGuildInfoOther: (params: {
			size: number;
			region: string;
			createdAt: number;
			verificationLevel: 'NONE' | 'LOW' | 'MEDIUM' | 'HIGH' | 'VERY_HIGH';
		}) => string[];
		commandRoleInfoTitles: Record<string, string>;
		commandRoleInfoData: (params: { role: Role; hoisted: string; mentionable: string }) => string[];
		commandRoleInfoAll: string;
		commandRoleInfoNoPermissions: string;
		commandFilterUndefinedWord: string;
		commandFilterAlreadyFiltered: string;
		commandFilterNotFiltered: string;
		commandFilterAdded: (params: { word: string }) => string;
		commandFilterRemoved: (params: { word: string }) => string;
		commandFilterReset: string;
		commandFilterShowEmpty: string;
		commandFilterShow: (params: { words: string }) => string;
		commandManageAttachmentsRequiredValue: string;
		commandManageAttachmentsInvalidAction: string;
		commandManageAttachmentsMaximum: (params: { value: number }) => string;
		commandManageAttachmentsExpire: (params: { value: number }) => string;
		commandManageAttachmentsDuration: (params: { value: number }) => string;
		commandManageAttachmentsAction: string;
		commandManageAttachmentsLogs: string;
		commandManageAttachmentsEnabled: string;
		commandManageAttachmentsDisabled: string;
		commandManageCommandAutoDeleteTextChannel: string;
		commandManageCommandAutoDeleteRequiredDuration: string;
		commandManageCommandAutoDeleteShowEmpty: string;
		commandManageCommandAutoDeleteShow: (params: { codeblock: string }) => string;
		commandManageCommandAutoDeleteAdd: (params: { channel: string; time: number }) => string;
		commandManageCommandAutoDeleteRemove: (params: { channel: string }) => string;
		commandManageCommandAutoDeleteRemoveNotset: (params: { channel: string }) => string;
		commandManageCommandAutoDeleteReset: string;
		commandManageCommandChannelTextChannel: string;
		commandManageCommandChannelRequiredCommand: string;
		commandManageCommandChannelShow: (params: { channel: string; commands: string }) => string;
		commandManageCommandChannelShowEmpty: string;
		commandManageCommandChannelAddAlreadyset: string;
		commandManageCommandChannelAdd: (params: { channel: string; command: string }) => string;
		commandManageCommandChannelRemoveNotset: (params: { channel: string }) => string;
		commandManageCommandChannelRemove: (params: { channel: string; command: string }) => string;
		commandManageCommandChannelResetEmpty: string;
		commandManageCommandChannelReset: (params: { channel: string }) => string;
		commandManageReactionRolesShowEmpty: string;
		commandManageReactionRolesAddPrompt: string;
		commandManageReactionRolesAddChannel: (params: { emoji: string; channel: string }) => string;
		commandManageReactionRolesAddMissing: string;
		commandManageReactionRolesAdd: (params: { emoji: string; url: string }) => string;
		commandManageReactionRolesRemoveNotExists: string;
		commandManageReactionRolesRemove: (params: { emoji: string; url: string }) => string;
		commandManageReactionRolesResetEmpty: string;
		commandManageReactionRolesReset: string;
		commandSetStarboardEmojiSet: (params: { emoji: string }) => string;
		configurationTextChannelRequired: string;
		configurationEquals: string;
		commandSetIgnoreChannelsSet: (params: { channel: string }) => string;
		commandSetIgnoreChannelsRemoved: (params: { channel: string }) => string;
		commandSetImageLogsSet: (params: { channel: string }) => string;
		commandSetMemberLogsSet: (params: { channel: string }) => string;
		commandSetMessageLogsSet: (params: { channel: string }) => string;
		commandSetModLogsSet: (params: { channel: string }) => string;
		commandSetPrefixSet: (params: { prefix: string }) => string;
		commandStickyRolesRequiredUser: string;
		commandStickyRolesRequiredRole: string;
		commandStickyRolesNotExists: (params: { user: string }) => string;
		commandStickyRolesReset: (params: { user: string }) => string;
		commandStickyRolesRemove: (params: { user: string }) => string;
		commandStickyRolesAddExists: (params: { user: string }) => string;
		commandStickyRolesAdd: (params: { user: string }) => string;
		commandStickyRolesShowEmpty: string;
		commandStickyRolesShowSingle: (params: { user: string; roles: string }) => string;
		commandRandRedditRequiredReddit: string;
		commandRandRedditInvalidArgument: string;
		commandRandRedditBanned: string;
		commandRandRedditFail: string;
		commandRandRedditAllNsfw: string;
		commandRandRedditAllNsfl: string;
		commandRandRedditMessage: (params: { title: string; author: string; url: string }) => string;
		commandRandRedditErrorPrivate: string;
		commandRandRedditErrorQuarantined: string;
		commandRandRedditErrorNotFound: string;
		commandRandRedditErrorBanned: string;
		commandRedditUserDescription: string;
		commandRedditUserExtended: LanguageHelpDisplayOptions;
		commandRedditUserComplexityLevels: string[];
		commandRedditUserInvalidUser: (params: { user: string }) => string;
		commandRedditUserQueryFailed: string;
		commandRedditUserTitles: {
			linkKarma: string;
			commentKarma: string;
			totalComments: string;
			totalSubmissions: string;
			commentControversiality: string;
			textComplexity: string;
			top5Subreddits: string;
			bySubmissions: string;
			byComments: string;
			bestComment: string;
			worstComment: string;
		};
		commandRedditUserData: (params: {
			user: string;
			timestamp: string;
		}) => {
			overviewFor: string;
			permalink: string;
			dataAvailableFor: string;
			joinedReddit: string;
		};
		commandShipDescription: string;
		commandShipExtended: LanguageHelpDisplayOptions;
		commandShipData: (params: {
			romeoUsername: string;
			julietUsername: string;
			shipName: string;
		}) => {
			title: string;
			description: string;
		};
		commandSnipeEmpty: string;
		commandSnipeTitle: string;
		commandUpvoteMessage: string;
		commandVaporwaveDescription: string;
		commandVaporwaveExtended: LanguageHelpDisplayOptions;
		commandVaporwaveOutput: (params: { str: string }) => string;

		commandHistoryDescription: string;
		commandHistoryExtended: LanguageHelpDisplayOptions;
		commandHistoryFooterNew: (params: {
			warnings: number;
			mutes: number;
			kicks: number;
			bans: number;
			warningsText: string;
			mutesText: string;
			kicksText: string;
			bansText: string;
		}) => string;
		commandHistoryFooterWarning: (params: { count: number }) => string;
		commandHistoryFooterWarningPlural: (params: { count: number }) => string;
		commandHistoryFooterMutes: (params: { count: number }) => string;
		commandHistoryFooterMutesPlural: (params: { count: number }) => string;
		commandHistoryFooterKicks: (params: { count: number }) => string;
		commandHistoryFooterKicksPlural: (params: { count: number }) => string;
		commandHistoryFooterBans: (params: { count: number }) => string;
		commandHistoryFooterBansPlural: (params: { count: number }) => string;
		commandModerationsDescription: string;
		commandModerationsExtended: LanguageHelpDisplayOptions;
		commandModerationsEmpty: string;
		commandModerationsAmount: (params: { count: number }) => string;
		commandModerationsAmountPlural: (params: { count: number }) => string;
		commandMutesDescription: string;
		commandMutesExtended: LanguageHelpDisplayOptions;
		commandWarningsDescription: string;
		commandWarningsExtended: LanguageHelpDisplayOptions;

		commandPermissions: (params: { username: string; id: string }) => string;
		commandPermissionsAll: string;
		commandRaidDisabled: string;
		commandRaidMissingKick: string;
		commandRaidList: string;
		commandRaidClear: string;
		commandRaidCool: string;
		commandFlow: (params: { amount: number }) => string;
		commandTimeTimed: string;
		commandTimeUndefinedTime: string;
		commandTimeUnsupportedType: string;
		commandTimeNotScheduled: string;
		commandTimeAborted: (params: { title: string }) => string;
		commandTimeScheduled: (params: { title: string; user: User; time: number }) => string;
		commandSlowmodeSet: (params: { cooldown: number }) => string;
		commandSlowmodeReset: string;
		commandSlowmodeTooLong: string;
		commandBanNotBannable: string;
		commandDehoistStarting: (params: { count: number }) => string;
		commandDehoistProgress: (params: { count: number; percentage: number }) => string;
		commandDehoistEmbed: (params: {
			users: number;
			dehoistedMemberCount: number;
			dehoistedWithErrorsCount: number;
			errored: number;
		}) => {
			title: string;
			descriptionNoone: string;
			descriptionWithError: string;
			descriptionWithMultipleErrors: string;
			description: string;
			descriptionMultipleMembers: string;
			fieldErrorTitle: string;
		};
		commandKickNotKickable: string;
		commandLockdownLock: (params: { channel: string }) => string;
		commandLockdownLocking: (params: { channel: string }) => string;
		commandLockdownLocked: (params: { channel: string }) => string;
		commandLockdownUnlocked: (params: { channel: string }) => string;
		commandLockdownOpen: (params: { channel: string }) => string;
		commandMuteLowlevel: string;
		commandMuteConfigureCancelled: string;
		commandMuteConfigure: string;
		commandMuteConfigureToomanyRoles: string;
		commandMuteMuted: string;
		commandMuteUserNotMuted: string;
		commandMuteUnconfigured: string;
		commandMutecreateMissingPermission: string;
		commandRestrictLowlevel: string;
		commandPruneInvalid: string;
		commandPruneAlert: (params: { count: number; total: number }) => string;
		commandPruneAlertPlural: (params: { count: number; total: number }) => string;
		commandPruneInvalidPosition: string;
		commandPruneInvalidFilter: string;
		commandPruneNoDeletes: string;
		commandPruneLogHeader: string;
		commandPruneLogMessage: (params: { channel: string; author: string; count: number }) => string;
		commandPruneLogMessagePlural: (params: { channel: string; author: string; count: number }) => string;
		commandReasonMissingCase: string;
		commandReasonNotExists: string;
		commandReasonUpdated: (params: { entries: readonly number[]; newReason: string; count: number }) => string[];
		commandReasonUpdatedPlural: (params: { entries: readonly number[]; newReason: string; count: number }) => string[];
		commandToggleModerationDmToggledEnabled: string;
		commandToggleModerationDmToggledDisabled: string;
		commandUnbanMissingPermission: string;
		commandUnmuteMissingPermission: string;
		commandVmuteMissingPermission: string;
		commandVmuteUserNotMuted: string;
		commandWarnDm: (params: { moderator: string; guild: string; reason: string }) => string;
		commandWarnMessage: (params: { user: User; log: number }) => string;
		commandModerationOutput: (params: { count: number; range: string | number; users: string; reason: string | null }) => string;
		commandModerationOutputPlural: (params: { count: number; range: string | number; users: string; reason: string | null }) => string;
		commandModerationOutputWithReason: (params: { count: number; range: string | number; users: string; reason: string | null }) => string;
		commandModerationOutputWithReasonPlural: (params: { count: number; range: string | number; users: string; reason: string | null }) => string;
		commandModerationFailed: (params: { users: string; count: number }) => string;
		commandModerationFailedPlural: (params: { users: string; count: number }) => string;
		commandModerationDmFooter: string;
		commandModerationDmDescription: (params: { guild: string; title: string; reason: string | null; duration: number | null }) => string[];
		commandModerationDmDescriptionWithReason: (params: {
			guild: string;
			title: string;
			reason: string | null;
			duration: number | null;
		}) => string[];
		commandModerationDmDescriptionWithDuration: (params: {
			guild: string;
			title: string;
			reason: string | null;
			duration: number | null;
		}) => string[];
		commandModerationDmDescriptionWithReasonWithDuration: (params: {
			guild: string;
			title: string;
			reason: string | null;
			duration: number | null;
		}) => string[];
		commandModerationDays: string;
		commandAutoRolePointsRequired: string;
		commandAutoRoleUpdateConfigured: string;
		commandAutoRoleUpdateUnconfigured: string;
		commandAutoRoleUpdate: (params: { role: Role; points: number; before: number }) => string;
		commandAutoRoleRemove: (params: { role: Role; before: number }) => string;
		commandAutoRoleAdd: (params: { role: Role; points: number }) => string;
		commandAutoRoleListEmpty: string;
		commandAutoRoleUnknownRole: (params: { role: string }) => string;
		commandBalance: (params: { user: string; amount: string }) => string;
		commandBalanceSelf: (params: { amount: string }) => string;
		commandBalanceBots: string;
		commandSocialMemberNotexists: string;
		commandSocialAdd: (params: { user: string; amount: number; count: number }) => string;
		commandSocialAddPlural: (params: { user: string; amount: number; count: number }) => string;
		commandSocialRemove: (params: { user: string; amount: number; count: number }) => string;
		commandSocialRemovePlural: (params: { user: string; amount: number; count: number }) => string;
		commandSocialUnchanged: (params: { user: string }) => string;
		commandSocialReset: (params: { user: string }) => string;
		commandBannerMissing: (params: { type: string }) => string;
		commandBannerNotexists: (params: { prefix: string }) => string;
		commandBannerUserlistEmpty: (params: { prefix: string }) => string;
		commandBannerResetDefault: string;
		commandBannerReset: string;
		commandBannerSetNotBought: string;
		commandBannerSet: (params: { banner: string }) => string;
		commandBannerBought: (params: { prefix: string; banner: string }) => string;
		commandBannerMoney: (params: { money: number; cost: number }) => string;
		commandBannerPaymentCancelled: string;
		commandBannerBuy: (params: { banner: string }) => string;
		commandBannerPrompt: string;
		commandToggleDarkModeEnabled: string;
		commandToggleDarkModeDisabled: string;
		commandDailyTime: (params: { time: number }) => string;
		commandDailyTimeSuccess: (params: { amount: number }) => string;
		commandDailyGrace: (params: { remaining: number }) => string[];
		commandDailyGraceAccepted: (params: { amount: number; remaining: number }) => string;
		commandDailyGraceDenied: string;
		commandDailyCollect: string;
		commandLevel: LevelTitles;
		commandDivorceSelf: string;
		commandDivorceNotTaken: string;
		commandDivorcePrompt: string;
		commandDivorceCancel: string;
		commandDivorceDm: (params: { user: string }) => string;
		commandDivorceSuccess: (params: { user: string }) => string;
		commandMarryWith: (params: { users: readonly string[] }) => string;
		commandMarryNotTaken: string;
		commandMarrySkyra: string;
		commandMarryAelia: string;
		commandMarryBots: string;
		commandMarrySelf: string;
		commandMarryAuthorTaken: (params: { author: User }) => string;
		commandMarryAuthorMultipleCancel: (params: { user: string }) => string;
		commandMarryTaken: (params: { count: number }) => string;
		commandMarryTakenPlural: (params: { count: number }) => string;
		commandMarryAlreadyMarried: (params: { user: User }) => string;
		commandMarryAuthorTooMany: (params: { limit: number }) => string;
		commandMarryTargetTooMany: (params: { limit: number }) => string;
		commandMarryMultipleCancel: string;
		commandMarryPetition: (params: { author: User; user: User }) => string;
		commandMarryNoreply: string;
		commandMarryDenied: string;
		commandMarryAccepted: (params: { author: User; user: User }) => string;
		commandMylevel: (params: { points: number; next: string; user: string }) => string;
		commandMylevelSelf: (params: { points: number; next: string }) => string;
		commandMylevelNext: (params: { remaining: number; next: number }) => string;
		commandPayMissingMoney: (params: { needed: number; has: number }) => string;
		commandPayPrompt: (params: { user: string; amount: number }) => string;
		commandPayPromptAccept: (params: { user: string; amount: number }) => string;
		commandPayPromptDeny: string;
		commandPaySelf: string;
		commandSocialPayBot: string;
		commandProfile: ProfileTitles;
		commandRemindmeCreate: (params: { id: string }) => string;
		commandRemindmeCreateNoDuration: string;
		commandRemindmeCreateNoDescription: string;
		commandRemindmeDeleteNoId: string;
		commandRemindmeDelete: (params: { task: ScheduleEntity; id: number }) => string;
		commandRemindmeListEmpty: string;
		commandRemindmeShowFooter: (params: { id: number }) => string;
		commandRemindmeInvalidId: string;
		commandRemindmeNotfound: string;
		commandReputationTime: (params: { remaining: number }) => string;
		commandReputationUsable: string;
		commandReputationUserNotfound: string;
		commandReputationSelf: string;
		commandReputationBots: string;
		commandReputationGive: (params: { user: string }) => string;
		commandReputationsBots: string;
		commandReputationsSelf: (params: { points: number }) => string;
		commandReputation: (params: { count: number }) => string;
		commandReputationPlural: (params: { count: number }) => string;
		commandReputations: (params: { user: string; points: string }) => string;
		commandRequireRole: string;
		commandScoreboardPosition: (params: { position: number }) => string;
		commandSetColor: (params: { color: string }) => string;
		commandSuggestNoSetup: (params: { username: string }) => string;
		commandSuggestNoSetupAsk: (params: { username: string }) => string;
		commandSuggestNoSetupAbort: string;
		commandSuggestNopermissions: (params: { username: string; channel: string }) => string;
		commandSuggestChannelPrompt: string;
		commandSuggestTitle: (params: { id: number }) => string;
		commandSuggestSuccess: (params: { channel: string }) => string;
		commandResolveSuggestionInvalidId: string;
		commandResolveSuggestionMessageNotFound: string;
		commandResolveSuggestionIdNotFound: string;
		commandResolveSuggestionDefaultComment: string;
		commandResolveSuggestionAuthorAdmin: string;
		commandResolveSuggestionAuthorModerator: string;
		commandResolveSuggestionActions: (params: {
			author: string;
		}) => {
			accept: string;
			consider: string;
			deny: string;
		};
		commandResolveSuggestionActionsDms: (params: {
			author: string;
			guild: string;
		}) => {
			accept: string;
			consider: string;
			deny: string;
		};
		commandResolveSuggestionDmFail: string;
		commandResolveSuggestionSuccess: (params: { id: number; actionText: string }) => string;
		commandResolveSuggestionSuccessAcceptedText: string;
		commandResolveSuggestionSuccessDeniedText: string;
		commandResolveSuggestionSuccessConsideredText: string;
		commandStarNostars: string;
		commandStarStats: string;
		commandStarStatsDescription: (params: { messages: string; stars: string }) => string;
		commandStarMessages: (params: { count: number }) => string;
		commandStarMessagesPlural: (params: { count: number }) => string;
		commandStars: (params: { count: number }) => string;
		commandStarsPlural: (params: { count: number }) => string;
		commandStarTopstarred: string;
		commandStarTopstarredDescription: (params: { medal: string; id: string; count: number }) => string;
		commandStarTopstarredDescriptionPlural: (params: { medal: string; id: string; count: number }) => string;
		commandStarTopreceivers: string;
		commandStarTopreceiversDescription: (params: { medal: string; id: string; count: number }) => string;
		commandStarTopreceiversDescriptionPlural: (params: { medal: string; id: string; count: number }) => string;
		commandEvalTimeout: (params: { seconds: number }) => string;
		commandEvalError: (params: { time: string; output: string; type: string }) => string;
		commandStatsTitles: {
			stats: string;
			uptime: string;
			serverUsage: string;
		};
		commandStatsFields: (params: {
			stats: StatsGeneral;
			uptime: StatsUptime;
			usage: StatsUsage;
		}) => {
			stats: string[];
			uptime: string[];
			serverUsage: string[];
		};
		commandTagDescription: string;
		commandTagExtended: LanguageHelpDisplayOptions;
		commandTagPermissionlevel: string;
		commandTagNameNotAllowed: string;
		commandTagNameTooLong: string;
		commandTagListEmpty: string;
		commandTagContentRequired: string;
		commandTagExists: (params: { tag: string }) => string;
		commandTagAdded: (params: { name: string; content: string }) => string;
		commandTagRemoved: (params: { name: string }) => string;
		commandTagNotexists: (params: { tag: string }) => string;
		commandTagEdited: (params: { name: string; content: string }) => string;
		commandTagReset: string;
		commandAvatarNone: string;
		commandColor: (params: { hex: string; rgb: string; hsl: string }) => string[];
		commandEmojiCustom: (params: { emoji: string; id: string }) => string[];
		commandEmojiTwemoji: (params: { emoji: string; id: string }) => string[];
		commandEmojiInvalid: string;
		commandEmojiTooLarge: (params: { emoji: string }) => string;
		commandEmotesDescription: string;
		commandEmotesExtended: LanguageHelpDisplayOptions;
		commandEmotesTitle: string;
		commandPriceCurrency: (params: { fromCurrency: string; fromAmount: number; worths: string[] }) => string;
		commandPriceCurrencyNotFound: string;
		commandQuoteMessage: string;
		commandRolesListEmpty: string;
		commandRolesAbort: (params: { prefix: string }) => string;
		commandRolesListTitle: string;
		commandRolesAdded: (params: { roles: string }) => string;
		commandRolesRemoved: (params: { roles: string }) => string;
		commandRolesNotPublic: (params: { roles: string }) => string;
		commandRolesNotManageable: (params: { roles: string }) => string;
		commandRolesAuditlog: string;
		commandDuckDuckGoNotfound: string;
		commandDuckDuckGoLookalso: string;
		commandUrbanNotFound: string;
		commandUrbanIndexNotfound: string;
		systemTextTruncated: (params: { definition: string; url: string }) => string;
		commandWhoisMemberTitles: {
			joined: string;
			createdAt: string;
		};
		commandWhoisMemberFields: (params: {
			member: GuildMember;
		}) => {
			joinedUnknown: string;
			joinedWithTimestamp: string;
			createdAt: string;
			footer: string;
		};
		commandWhoisMemberRoles: (params: { count: number }) => string;
		commandWhoisMemberRolesPlural: (params: { count: number }) => string;
		commandWhoisMemberPermissions: string;
		commandWhoisMemberPermissionsAll: string;
		commandWhoisUserTitles: {
			createdAt: string;
		};
		commandWhoisUserFields: (params: {
			user: User;
		}) => {
			createdAt: string;
			footer: string;
		};
		commandFollowage: (params: { user: string; channel: string; time: number }) => string;
		commandFollowageMissingEntries: string;
		commandFollowageNotFollowing: string;
		commandTwitchNoEntries: string;
		commandTwitchTitles: {
			followers: string;
			views: string;
			clickToVisit: string;
			partner: string;
		};
		commandTwitchPartnershipWithoutAffiliate: string;
		commandTwitchAffiliateStatus: {
			affiliated: string;
			partnered: string;
		};
		commandTwitchCreatedAt: string;
		commandTwitchSubscriptionRequiredStreamer: string;
		commandTwitchSubscriptionStreamerNotFound: string;
		commandTwitchSubscriptionRequiredChannel: string;
		commandTwitchSubscriptionRequiredStatus: string;
		commandTwitchSubscriptionStatusValues: [string, string];
		commandTwitchSubscriptionInvalidStatus: string;
		commandTwitchSubscriptionRequiredContent: string;
		commandTwitchSubscriptionAddDuplicated: string;
		commandTwitchSubscriptionAddSuccessOffline: (params: { name: string; channel: string }) => string;
		commandTwitchSubscriptionAddSuccessLive: (params: { name: string; channel: string }) => string;
		commandTwitchSubscriptionRemoveStreamerNotSubscribed: string;
		commandTwitchSubscriptionRemoveEntryNotExists: string;
		commandTwitchSubscriptionRemoveSuccessOffline: (params: { name: string; channel: string }) => string;
		commandTwitchSubscriptionRemoveSuccessLive: (params: { name: string; channel: string }) => string;
		commandTwitchSubscriptionResetEmpty: string;
		commandTwitchSubscriptionResetSuccess: (params: { count: number }) => string;
		commandTwitchSubscriptionResetSuccessPlural: (params: { count: number }) => string;
		commandTwitchSubscriptionResetStreamerNotSubscribed: string;
		commandTwitchSubscriptionResetChannelSuccess: (params: { name: string; count: number }) => string;
		commandTwitchSubscriptionResetChannelSuccessPlural: (params: { name: string; count: number }) => string;
		commandTwitchSubscriptionShowStreamerNotSubscribed: string;
		commandTwitchSubscriptionShowStatus: [string, string];
		commandTwitchSubscriptionShowEmpty: string;
		commandTwitchSubscriptionShowUnknownUser: string;
		commandWikipediaNotfound: string;
		commandYoutubeNotfound: string;
		commandYoutubeIndexNotfound: string;
		commandDefineDescription: string;
		commandDefineExtended: LanguageHelpDisplayOptions;
		commandDefineNotfound: string;
		commandDefinePronounciation: string;
		commandDefineUnknown: string;
		commandWbang: (params: { user: string }) => string;
		commandWbanghead: string;
		commandWbite: (params: { user: string }) => string;
		commandWblush: string;
		commandWcry: (params: { user: string }) => string;
		commandWcuddle: (params: { user: string }) => string;
		commandWdance: string;
		commandWgreet: (params: { user: string }) => string;
		commandWhug: (params: { user: string }) => string;
		commandWkiss: (params: { user: string }) => string;
		commandWlewd: string;
		commandWlick: (params: { user: string }) => string;
		commandWnom: string;
		commandWneko: string;
		commandWpat: (params: { user: string }) => string;
		commandWpout: string;
		commandWpunch: (params: { user: string }) => string;
		commandWslap: (params: { user: string }) => string;
		commandWsleepy: string;
		commandWsmile: string;
		commandWsmug: string;
		commandWstare: (params: { user: string }) => string;
		commandWthumbsup: string;
		commandWtickle: (params: { user: string }) => string;
		constMonitorInvitelink: string;
		constMonitorLink: string;
		constMonitorNms: string;
		constMonitorWordfilter: string;
		constMonitorCapsfilter: string;
		constMonitorAttachmentfilter: string;
		constMonitorReactionfilter: string;
		moderationMonitorAttachments: string;
		moderationMonitorAttachmentsWithMaximum: (params: { amount: number; maximum: number }) => string;
		moderationMonitorCapitals: string;
		moderationMonitorCapitalsWithMaximum: (params: { amount: number; maximum: number }) => string;
		moderationMonitorInvites: string;
		moderationMonitorInvitesWithMaximum: (params: { amount: number; maximum: number }) => string;
		moderationMonitorLinks: string;
		moderationMonitorLinksWithMaximum: (params: { amount: number; maximum: number }) => string;
		moderationMonitorMessages: string;
		moderationMonitorMessagesWithMaximum: (params: { amount: number; maximum: number }) => string;
		moderationMonitorNewlines: string;
		moderationMonitorNewlinesWithMaximum: (params: { amount: number; maximum: number }) => string;
		moderationMonitorWords: string;
		moderationMonitorWordsWithMaximum: (params: { amount: number; maximum: number }) => string;
		monitorInviteFilterAlert: (params: { user: string }) => string;
		monitorInviteFilterLog: (params: { links: readonly string[]; count: number }) => string;
		monitorInviteFilterLogPlural: (params: { links: readonly string[]; count: number }) => string;
		monitorNolink: (params: { user: string }) => string;
		monitorWordFilterDm: (params: { filtered: string }) => string;
		monitorCapsFilterDm: (params: { message: string }) => string;
		monitorWordFilter: (params: { user: string }) => string;
		monitorCapsFilter: (params: { user: string }) => string;
		monitorMessageFilter: (params: { user: string }) => string;
		monitorNewlineFilter: (params: { user: string }) => string;
		monitorReactionsFilter: (params: { user: string }) => string;
		monitorNmsMessage: (params: { user: User }) => string[];
		monitorNmsModlog: (params: { threshold: number }) => string;
		monitorNmsAlert: string;
		monitorSocialAchievement: string;
		inhibitorSpam: (params: { channel: string }) => string;
		hgBloodbath: readonly string[];
		hgDay: readonly string[];
		hgNight: readonly string[];
		serializerAutoRoleInvalid: string;
		serializerCommandAutoDeleteInvalid: string;
		serializerCustomCommandInvalid: string;
		serializerDisabledCommandChannelInvalid: string;
		serializerPermissionNodeDuplicatedCommand: (params: { command: string }) => string;
		serializerPermissionNodeInvalidCommand: (params: { command: string }) => string;
		serializerPermissionNodeInvalidTarget: string;
		serializerPermissionNodeInvalid: string;
		serializerPermissionNodeSecurityEveryoneAllows: string;
		serializerPermissionNodeSecurityGuarded: (params: { command: string }) => string;
		serializerPermissionNodeSecurityOwner: string;
		serializerReactionRoleInvalid: string;
		serializerStickyRoleInvalid: string;
		serializerTriggerAliasInvalid: string;
		serializerTriggerIncludeInvalid: string;
		serializerTwitchSubscriptionInvalidStreamer: string;
		serializerTwitchSubscriptionInvalid: string;
		serializerUniqueRoleSetInvalid: string;
		selfModerationCommandInvalidMissingAction: (params: { name: string }) => string;
		selfModerationCommandInvalidMissingArguments: (params: { name: string }) => string;
		selfModerationCommandInvalidSoftaction: (params: { name: string }) => string;
		selfModerationCommandInvalidHardaction: (params: { name: string }) => string;
		selfModerationCommandEnabled: string;
		selfModerationCommandDisabled: string;
		selfModerationCommandSoftAction: string;
		selfModerationCommandSoftActionWithValue: (params: { value: string }) => string;
		selfModerationCommandHardAction: (params: { value: string }) => string;
		selfModerationCommandHardActionDuration: string;
		selfModerationCommandHardActionDurationWithValue: (params: { value: number }) => string;
		selfModerationCommandThresholdMaximum: string;
		selfModerationCommandThresholdMaximumWithValue: (params: { value: number }) => string;
		selfModerationCommandThresholdDuration: string;
		selfModerationCommandThresholdDurationWithValue: (params: { value: number }) => string;
		selfModerationCommandShow: (params: {
			kEnabled: string;
			kAlert: string;
			kLog: string;
			kDelete: string;
			kHardAction: string;
			hardActionDurationText: string;
			thresholdMaximumText: string | number;
			thresholdDurationText: string;
		}) => readonly string[];
		selfModerationCommandShowDurationPermanent: string;
		selfModerationCommandShowUnset: string;
		selfModerationSoftActionAlert: string;
		selfModerationSoftActionLog: string;
		selfModerationSoftActionDelete: string;
		selfModerationHardActionBan: string;
		selfModerationHardActionKick: string;
		selfModerationHardActionMute: string;
		selfModerationHardActionSoftban: string;
		selfModerationHardActionWarning: string;
		selfModerationHardActionNone: string;
		selfModerationEnabled: string;
		selfModerationDisabled: string;
		selfModerationMaximumTooShort: (params: { minimum: number; value: number }) => string;
		selfModerationMaximumTooLong: (params: { maximum: number; value: number }) => string;
		selfModerationDurationTooShort: (params: { minimum: number; value: number }) => string;
		selfModerationDurationTooLong: (params: { maximum: number; value: number }) => string;
		moderationActions: ModerationAction;
		actionApplyReason: (params: { action: string; reason: string }) => string;
		actionApplyNoReason: (params: { action: string }) => string;
		actionRevokeReason: (params: { action: string; reason: string }) => string;
		actionRevokeNoReason: (params: { action: string }) => string;
		actionSoftbanReason: (params: { reason: string }) => string;
		actionUnSoftbanReason: (params: { reason: string }) => string;
		actionSoftbanNoReason: string;
		actionUnSoftbanNoReason: string;
		actionSetNicknameSet: (params: { reason: string }) => string;
		actionSetNicknameRemoved: (params: { reason: string }) => string;
		actionSetNicknameNoReasonSet: string;
		actionSetNicknameNoReasonRemoved: string;
		actionSetupMuteExists: string;
		actionSetupRestrictionExists: string;
		actionSetupTooManyRoles: string;
		actionSharedRoleSetupExisting: string;
		actionSharedRoleSetupExistingName: string;
		actionSharedRoleSetupNew: string;
		actionSharedRoleSetupAsk: (params: { role: string; channels: number; permissions: string }) => string;
		actionSharedRoleSetupAskMultipleChannels: (params: { role: string; channels: number; permissions: string }) => string;
		actionSharedRoleSetupAskMultiplePermissions: (params: { role: string; channels: number; permissions: string }) => string;
		actionSharedRoleSetupAskMultipleChannelsMultiplePermissions: (params: { role: string; channels: number; permissions: string }) => string;
		actionRequiredMember: string;
		muteNotConfigured: string;
		restrictionNotConfigured: string;
		muteNotInMember: string;
		muteLowHierarchy: string;
		muteCannotManageRoles: string;
		muteNotExists: string;
		resolverDateSuffix: string;
		resolverPositiveAmount: string;
		systemPoweredByWeebsh: string;
		prefixReminder: (params: { prefix: string }) => string;
		unexpectedIssue: string;
		commandDmNotSent: string;
		commandDmSent: string;
		commandRoleHigherSkyra: string;
		commandRoleHigher: string;
		commandSuccess: string;
		commandToskyra: string;
		commandUserself: string;
		systemParseError: string;
		systemHighestRole: string;
		systemChannelNotPostable: string;
		systemFetchbansFail: string;
		systemLoading: readonly string[];
		systemError: string;
		systemDatabaseError: string;
		systemDiscordAborterror: string;
		systemQueryFail: string;
		systemNoResults: string;
		systemMessageNotFound: string;
		systemNotenoughParameters: string;
		systemCannotAccessChannel: string;
		systemExceededLengthOutput: (params: { output: string; time?: string; type?: string }) => string;
		systemExceededLengthOutputWithTypeAndTime: (params: { output: string; time?: string; type?: string }) => string;
		systemExceededLengthOutputConsole: (params: { time?: string; type?: string }) => string;
		systemExceededLengthOutputConsoleWithTypeAndTime: (params: { time?: string; type?: string }) => string;
		systemExceededLengthOutputFile: (params: { time?: string; type?: string }) => string;
		systemExceededLengthOutputFileWithTypeAndTime: (params: { time?: string; type?: string }) => string;
		systemExceededLengthOutputHastebin: (params: { url: string; time?: string; type?: string }) => string;
		systemExceededLengthOutputHastebinWithTypeAndTime: (params: { url: string; time?: string; type?: string }) => string;
		systemExceededLengthChooseOutput: (params: { output: string[] }) => string;
		systemExternalServerError: string;
		systemPokedexExternalResource: string;
		jumpTo: string;
		resolverInvalidChannelName: (params: { name: string }) => string;
		resolverChannelNotInGuild: string;
		resolverChannelNotInGuildSubcommand: (params: { command: string; subcommand: string }) => string;
		resolverInvalidRoleName: (params: { name: string }) => string;
		resolverInvalidUsername: (params: { name: string }) => string;
		resolverMembernameUserLeftDuringPrompt: string;
		listifyPage: (params: { page: number; pageCount: number; results: string }) => string;
		moderationLogAppealed: string;
		moderationLogExpiresIn: (params: { duration: number }) => string;
		moderationLogDescription: (params: { data: Moderation.ModerationManagerDescriptionData }) => string;
		moderationLogFooter: (params: { caseID: number }) => string;
		moderationCaseNotExists: (params: { count: number }) => string;
		ModerationCaseNotExistsPlural: (params: { count: number }) => string;
		guildSettingsChannelsMod: string;
		guildSettingsRolesRestricted: (params: { prefix: string; path: string }) => string;
		guildMuteNotFound: string;
		guildBansEmpty: string;
		guildBansNotFound: string;
		channelNotReadable: string;
		userNotInGuild: string;
		userNotExistent: string;
		eventsGuildMemberAdd: string;
		eventsGuildMemberAddMute: string;
		eventsGuildMemberAddRaid: string;
		eventsGuildMemberAddDescription: (params: { mention: string; time: number }) => string;
		eventsGuildMemberRemove: string;
		eventsGuildMemberKicked: string;
		eventsGuildMemberBanned: string;
		eventsGuildMemberSoftBanned: string;
		eventsGuildMemberRemoveDescription: (params: { mention: string; time: number }) => string;
		eventsGuildMemberRemoveDescriptionWithJoinedAt: (params: { mention: string; time: number }) => string;
		eventsGuildMemberUpdateNickname: (params: { previous: string; current: string }) => string;
		eventsGuildMemberAddedNickname: (params: { previous: string; current: string }) => string;
		eventsGuildMemberRemovedNickname: (params: { previous: string }) => string;
		eventsNicknameUpdate: string;
		eventsUsernameUpdate: string;
		eventsNameUpdatePreviousWasSet: (params: { previousName: string | null }) => string;
		eventsNameUpdatePreviousWasNotSet: (params: { previousName: string | null }) => string;
		eventsNameUpdateNextWasSet: (params: { nextName: string | null }) => string;
		eventsNameUpdateNextWasNotSet: (params: { nextName: string | null }) => string;
		eventsGuildMemberNoUpdate: string;
		eventsGuildMemberAddedRoles: (params: { addedRoles: string }) => string;
		eventsGuildMemberAddedRolesPlural: (params: { addedRoles: string }) => string;
		eventsGuildMemberRemovedRoles: (params: { removedRoles: string }) => string;
		eventsGuildMemberRemovedRolesPlural: (params: { removedRoles: string }) => string;
		eventsRoleUpdate: string;
		eventsMessageUpdate: string;
		eventsMessageDelete: string;
		eventsReaction: string;
		eventsCommand: (params: { command: string }) => string;
		settingsDeleteChannelsDefault: string;
		settingsDeleteRolesInitial: string;
		settingsDeleteRolesMute: string;
		modlogTimed: (params: { remaining: number }) => string;
		guildWarnNotFound: string;
		guildMemberNotVoicechannel: string;
		promptlistMultipleChoice: (params: { list: string; count: number }) => string;
		promptlistMultipleChoicePlural: (params: { list: string; count: number }) => string;
		promptlistAttemptFailed: (params: { list: string; attempt: number; maxAttempts: number }) => string;
		promptlistAborted: string;
		fuzzySearchMatches: (params: { matches: number; codeblock: string }) => string;
		fuzzySearchAborted: string;
		fuzzySearchInvalidNumber: string;
		fuzzySearchInvalidIndex: string;
		eventsErrorWtf: string;
		eventsErrorString: (params: { mention: string; message: string }) => string;
		constUsers: string;
		constMonitorMessagefilter: string;
		constMonitorNewlinefilter: string;
		unknownChannel: string;
		unknownRole: string;
		unknownUser: string;
		notificationsTwitchNoGameName: string;
		notificationsTwitchEmbedDescription: (params: { userName: string }) => string;
		notificationsTwitchEmbedDescriptionWithGame: (params: { userName: string; gameName: string }) => string;
		notificationTwitchEmbedFooter: string;
	}
}
