import { T } from '@lib/types/Shared';

export const MultiTooFew = T<(params: { name: string; min?: number; conjunctionWord: string }) => string>('resolverMultiTooFew');
export const InvalidBool = T<(params: { name: string }) => string>('resolverInvalidBool');
export const InvalidChannel = T<(params: { name: string }) => string>('resolverInvalidChannel');
export const InvalidCustom = T<(params: { name: string; type: string }) => string>('resolverInvalidCustom');
export const InvalidDate = T<(params: { name: string }) => string>('resolverInvalidDate');
export const InvalidDuration = T<(params: { name: string }) => string>('resolverInvalidDuration');
export const InvalidEmoji = T<(params: { name: string }) => string>('resolverInvalidEmoji');
export const InvalidFloat = T<(params: { name: string }) => string>('resolverInvalidFloat');
export const InvalidGuild = T<(params: { name: string }) => string>('resolverInvalidGuild');
export const InvalidInt = T<(params: { name: string }) => string>('resolverInvalidInt');
export const InvalidInvite = T<(params: { name: string }) => string>('resolverInvalidInvite');
export const InvalidWager = T<(params: { bet: number; validAmounts: string }) => string>('resolverInvalidWager');
export const InvalidLiteral = T<(params: { name: string }) => string>('resolverInvalidLiteral');
export const InvalidMember = T<(params: { name: string }) => string>('resolverInvalidMember');
export const InvalidMessage = T<(params: { name: string }) => string>('resolverInvalidMessage');
export const InvalidPiece = T<(params: { name: string; piece: string }) => string>('resolverInvalidPiece');
export const InvalidRegexMatch = T<(params: { name: string; pattern: string }) => string>('resolverInvalidRegexMatch');
export const InvalidRole = T<(params: { name: string }) => string>('resolverInvalidRole');
export const InvalidString = T<(params: { name: string }) => string>('resolverInvalidString');
export const InvalidTime = T<(params: { name: string }) => string>('resolverInvalidTime');
export const InvalidUrl = T<(params: { name: string }) => string>('resolverInvalidUrl');
export const InvalidUser = T<(params: { name: string }) => string>('resolverInvalidUser');
export const InvalidSnowflake = T<(params: { name: string }) => string>('resolverInvalidSnowflake');
export const InvalidStore = T<(params: { store: string }) => string>('resolverInvalidStore');
export const StringSuffix = T<string>('resolverStringSuffix');
export const MinmaxExactlyInclusive = T<(params: { name: string; min: number }) => string>('resolverMinmaxExactlyInclusive');
export const MinmaxExactlyExclusive = T<(params: { name: string; min: number }) => string>('resolverMinmaxExactlyExclusive');
export const MinmaxBothInclusive = T<(params: { name: string; min: number; max: number }) => string>('resolverMinmaxBothInclusive');
export const MinmaxBothExclusive = T<(params: { name: string; min: number; max: number }) => string>('resolverMinmaxBothExclusive');
export const MinmaxMinInclusive = T<(params: { name: string; min: number }) => string>('resolverMinmaxMinInclusive');
export const MinmaxMinExclusive = T<(params: { name: string; min: number }) => string>('resolverMinmaxMinExclusive');
export const MinmaxMaxInclusive = T<(params: { name: string; max: number }) => string>('resolverMinmaxMaxInclusive');
export const MinmaxMaxExclusive = T<(params: { name: string; max: number }) => string>('resolverMinmaxMaxExclusive');
