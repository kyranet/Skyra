name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  pre_ci:
    name: Prepare CI environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: '[Push] Get commit message'
        if: github.event_name == 'push'
        id: push_get_commit_message
        run: echo ::set-output name=push_commit_message::$(git log --format=%B -n 1 HEAD)
      - name: '[Pull Request] Get commit message'
        if: github.event_name == 'pull_request'
        id: pr_get_commit_message
        run: echo ::set-output name=pr_commit_message::$(git log --format=%B -n 1 HEAD^2)
      - name: Add problem matchers
        run: |
          echo "::add-matcher::.github/problemMatchers/tsc.json"
          echo "::add-matcher::.github/problemMatchers/eslint-stylish.json"
    outputs:
      commit_message: $( [ -z "${{ steps.pr_get_commit_message.outputs.pr_commit_message }}" ] && echo "${{ steps.push_get_commit_message.outputs.push_commit_message }}" || echo "${{ steps.pr_get_commit_message.outputs.pr_commit_message }}" )

  NodeLinting:
    name: Linting NodeJS
    runs-on: ubuntu-latest
    if: "!contains(needs.pre_ci.outputs.commit_message, '[skip ci]')"
    needs: pre_ci
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Use Node.js 15
        uses: actions/setup-node@v2
        with:
          node-version: 15
      - name: Restore CI Cache
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.os }}-15-${{ hashFiles('**/yarn.lock') }}
      - name: Install Dependencies
        run: yarn --ignore-scripts --frozen-lockfile
      - name: Run ESLint
        run: yarn lint --fix=false

  NodeBuilding:
    name: Building NodeJS
    runs-on: ubuntu-latest
    if: "!contains(needs.pre_ci.outputs.commit_message, '[skip ci]')"
    needs: pre_ci
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Use Node.js 15
        uses: actions/setup-node@v2
        with:
          node-version: 15
      - name: Restore CI Cache
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.os }}-15-${{ hashFiles('**/yarn.lock') }}
      - name: Install Dependencies
        run: yarn --ignore-scripts --frozen-lockfile
      - name: Copy Configuration
        run: |
          pushd src &&
          cp config.example.ts config.ts &&
          popd
      - name: Run tsc
        run: yarn build

  NodeTesting:
    name: Unit Tests
    runs-on: ubuntu-latest
    if: "!contains(needs.pre_ci.outputs.commit_message, '[skip ci]')"
    needs: pre_ci
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Use Node.js v15
        uses: actions/setup-node@v2
        with:
          node-version: 15
      - name: Restore CI Cache
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.os }}-15-${{ hashFiles('**/yarn.lock') }}
      - name: Setup node-canvas Dependencies
        run: |
          sudo apt-get install libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev -y &&
          yarn global add node-gyp node-pre-gyp
      - name: Install Dependencies
        run: yarn --frozen-lockfile
      - name: Copy Configuration
        run: |
          pushd src &&
          cp config.example.ts config.ts &&
          popd
      - name: Run tests
        run: yarn test --coverage
      - name: Store code coverage report
        uses: actions/upload-artifact@v2
        with:
          name: nodejs-coverage
          path: coverage/

  DotNetCI:
    name: Dotnet Build & Test
    runs-on: ubuntu-latest
    if: "!contains(needs.pre_ci.outputs.commit_message, '[skip ci]')"
    needs: pre_ci
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'
      - name: Restore CI Cache
        uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('services/**/packages.lock.json') }}
      - name: Build C# code
        run: dotnet build services
      - name: Run C# tests
        run: |
          dotnet new tool-manifest
          dotnet tool install dotnet-ef
          docker container run --name postgres -e POSTGRES_PASSWORD=postgres -d --expose 5432 -p 5432:5432 -it postgres:12
          dotnet tool run dotnet-ef migrations add --project services/Skyra.Database InitCreate
          dotnet tool run dotnet-ef database update --project services/Skyra.Database
          dotnet test services --collect:"XPlat Code Coverage" /p:SkipAutoProps=true --settings services/coverlet.runsettings
      - name: Store code coverage report
        uses: actions/upload-artifact@v2
        with:
          name: dotnet-coverage
          path: services/Skyra.Tests/TestResults/

  Upload_Coverage_Report:
    name: Upload coverage report to codecov
    needs:
      - DotNetCI
      - NodeTesting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Download NodeJS Coverage report
        uses: actions/download-artifact@v2
        with:
          path: coverage/
      - name: Codecov Upload
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: coverage/
          flags: dotnet,nodejs
          fail_ci_if_error: true
