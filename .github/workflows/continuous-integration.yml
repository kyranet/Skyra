name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  pre_ci:
    name: Prepare CI environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: '[Push] Get commit message'
        if: github.event_name == 'push'
        id: push_get_commit_message
        run: echo ::set-output name=push_commit_message::$(git log --format=%B -n 1 HEAD)
      - name: '[Pull Request] Get commit message'
        if: github.event_name == 'pull_request'
        id: pr_get_commit_message
        run: echo ::set-output name=pr_commit_message::$(git log --format=%B -n 1 HEAD^2)
      - name: Add problem matchers
        run: |
          echo "::add-matcher::.github/problemMatchers/tsc.json"
          echo "::add-matcher::.github/problemMatchers/eslint-stylish.json"
    outputs:
      commit_message: $( [ -z "${{ steps.pr_get_commit_message.outputs.pr_commit_message }}" ] && echo "${{ steps.push_get_commit_message.outputs.push_commit_message }}" || echo "${{ steps.pr_get_commit_message.outputs.pr_commit_message }}" )

  NodeLinting:
    name: Linting NodeJS
    runs-on: ubuntu-latest
    if: "!contains(needs.pre_ci.outputs.commit_message, '[skip ci]')"
    needs: pre_ci
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Use Node.js v15
        uses: actions/setup-node@v2
        with:
          node-version: 15
      - name: Restore CI Cache
        uses: actions/cache@v2.1.6
        id: cache-restore
        with:
          path: node_modules
          key: ${{ runner.os }}-15-${{ hashFiles('**/yarn.lock') }}
      - name: Install Dependencies if Cache Miss
        if: ${{ !steps.cache-restore.outputs.cache-hit }}
        run: yarn --frozen-lockfile
      - name: Run ESLint
        run: yarn lint --fix=false

  NodeBuilding:
    name: Building NodeJS
    runs-on: ubuntu-latest
    if: "!contains(needs.pre_ci.outputs.commit_message, '[skip ci]')"
    needs: pre_ci
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Use Node.js v15
        uses: actions/setup-node@v2
        with:
          node-version: 15
      - name: Restore CI Cache
        uses: actions/cache@v2.1.6
        id: cache-restore
        with:
          path: node_modules
          key: ${{ runner.os }}-15-${{ hashFiles('**/yarn.lock') }}
      - name: Install Dependencies if Cache Miss
        if: ${{ !steps.cache-restore.outputs.cache-hit }}
        run: yarn --frozen-lockfile
      - name: Build code
        run: yarn build

  NodeUnitTesting:
    name: Unit Tests
    runs-on: ubuntu-latest
    if: "!contains(needs.pre_ci.outputs.commit_message, '[skip ci]')"
    needs: pre_ci
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Use Node.js v15
        uses: actions/setup-node@v2
        with:
          node-version: 15
      - name: Setup node-canvas Dependencies
        run: |
          sudo apt-get install libcairo2-dev libpango1.0-dev libjpeg-dev libgif-dev librsvg2-dev -y &&
          yarn global add node-gyp node-pre-gyp
      - name: Restore CI Cache
        uses: actions/cache@v2.1.6
        id: cache-restore
        with:
          path: node_modules
          key: ${{ runner.os }}-15-${{ hashFiles('**/yarn.lock') }}
      - name: Install Dependencies if Cache Miss
        if: ${{ !steps.cache-restore.outputs.cache-hit }}
        run: yarn --frozen-lockfile
      - name: Run gRPC generator script
        run: yarn scripts:grpc
      - name: Run unit tests
        run: yarn test:unit --coverage
      - name: Store code coverage report
        uses: actions/upload-artifact@v2
        with:
          name: nodejs-coverage
          path: coverage/

  NodeIntegrationTesting:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: "!contains(needs.pre_ci.outputs.commit_message, '[skip ci]')"
    needs: pre_ci
    services:
      postgres:
        image: ghcr.io/skyra-project/postgres:latest
        env:
          POSTGRES_DB: skyra-nodejs-test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      grpc:
        image: ghcr.io/skyra-project/grpc:latest
        env:
          POSTGRES_DB: skyra-nodejs-test
          POSTGRES_HOST: postgres
        ports:
          - '8291:80'
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Use Node.js v15
        uses: actions/setup-node@v2
        with:
          node-version: 15
      - name: Restore CI Cache
        uses: actions/cache@v2.1.6
        id: cache-restore
        with:
          path: node_modules
          key: ${{ runner.os }}-15-${{ hashFiles('**/yarn.lock') }}
      - name: Install Dependencies if Cache Miss
        if: ${{ !steps.cache-restore.outputs.cache-hit }}
        run: yarn --frozen-lockfile
      - name: Run gRPC generator script
        run: yarn scripts:grpc
      - name: Wait for Skyra.Grpc
        run: |
          while ! nc -z localhost 8291; do
            sleep 0.1 # wait for 1/10 of the second before check again
          done
      - name: Run EntityFramework migrations
        run: |
          dotnet new tool-manifest
          dotnet tool install dotnet-ef
          dotnet tool run dotnet-ef database update -p Skyra.Database
        working-directory: services
        env:
          POSTGRES_DB: skyra-nodejs-test
      - name: Run Integration Tests
        run: yarn test:it

  DotNetCI:
    name: Dotnet Build & Test
    runs-on: ubuntu-latest
    if: "!contains(needs.pre_ci.outputs.commit_message, '[skip ci]')"
    needs: pre_ci
    services:
      postgres:
        image: ghcr.io/skyra-project/postgres:latest
        env:
          POSTGRES_DB: skyra-dotnet-test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'
      - name: Restore CI Cache
        uses: actions/cache@v2.1.6
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('services/**/packages.lock.json') }}
      - name: Build C# code
        run: dotnet build services
      - name: Run C# unit tests
        run: dotnet test services/Skyra.UnitTests --collect:"XPlat Code Coverage" --settings services/coverlet.runsettings
      - name: Run C# integration tests
        run: |
          dotnet new tool-manifest
          dotnet tool install dotnet-ef
          dotnet tool run dotnet-ef database update --project services/Skyra.Database
          dotnet run --project services/Skyra.Grpc &
          while ! nc -z localhost 8291; do
            sleep 0.1 # wait for 1/10 of the second before check again
          done
          dotnet test services/Skyra.IntegrationTests --collect:"XPlat Code Coverage" --settings services/coverlet.runsettings
        env:
          POSTGRES_DB: skyra-dotnet-test
      - name: Store code coverage report (Unit Tests)
        uses: actions/upload-artifact@v2
        with:
          name: dotnet-coverage-unit
          path: services/Skyra.UnitTests/TestResults/
      - name: Store code coverage report (Integration Tests)
        uses: actions/upload-artifact@v2
        with:
          name: dotnet-coverage-integration
          path: services/Skyra.IntegrationTests/TestResults/

  Upload_Coverage_Report:
    name: Upload coverage report to codecov
    needs:
      - DotNetCI
      - NodeUnitTesting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Download Coverage report
        uses: actions/download-artifact@v2
        with:
          path: coverage/
      - name: Codecov Upload
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: coverage/
          flags: dotnet,nodejs
          fail_ci_if_error: true
