name: Continuous Integration - .NET

on:
  push:
    branches:
      - main
    paths:
      - services/**
      - .github/workflows/codeql-analysis-dotnet.yml
      - .github/workflows/continuous-integration-dotnet.yml
  pull_request:
    paths:
      - services/**
      - .github/workflows/codeql-analysis-dotnet.yml
      - .github/workflows/continuous-integration-dotnet.yml

jobs:
  pre_ci:
    name: Prepare CI environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: '[Push] Get commit message'
        if: github.event_name == 'push'
        id: push_get_commit_message
        run: echo ::set-output name=push_commit_message::$(git log --format=%B -n 1 HEAD)
      - name: '[Pull Request] Get commit message'
        if: github.event_name == 'pull_request'
        id: pr_get_commit_message
        run: echo ::set-output name=pr_commit_message::$(git log --format=%B -n 1 HEAD^2)
    outputs:
      commit_message: $( [ -z "${{ steps.pr_get_commit_message.outputs.pr_commit_message }}" ] && echo "${{ steps.push_get_commit_message.outputs.push_commit_message }}" || echo "${{ steps.pr_get_commit_message.outputs.pr_commit_message }}" )

  BuildAndTest:
    name: Build and test
    runs-on: ubuntu-latest
    if: "!contains(needs.pre_ci.outputs.commit_message, '[skip ci]')"
    needs: pre_ci
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'
      - name: Restore CI Cache
        uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('services/**/packages.lock.json') }}
      - name: Build C# code
        run: dotnet build services
      - name: Run C# tests
        run: dotnet test services --collect:"XPlat Code Coverage"
      - name: Store code coverage report
        uses: actions/upload-artifact@v2
        with:
          name: dotnet-coverage
          path: services/Skyra.Tests/TestResults/

  Upload_Coverage_Report:
    name: Upload coverage report to codecov
    needs: [BuildAndTest]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
      - name: Download Coverage report
        uses: actions/download-artifact@v2
        with:
          name: dotnet-coverage
          path: services/Skyra.Tests/TestResults/
      - name: Codecov Upload
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./services/Skyra.Tests/TestResults/
          flags: unittests-dotnet
          fail_ci_if_error: true
