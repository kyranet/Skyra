diff --git a/src/client/actions/ChannelUpdate.js b/src/client/actions/ChannelUpdate.js
index 34d1a86a4c0d59317b7d7be69b42cff4fb71e1c7..59bdc5b4858bc036934b82f54f2a6c471e3acdd5 100644
--- a/src/client/actions/ChannelUpdate.js
+++ b/src/client/actions/ChannelUpdate.js
@@ -14,7 +14,15 @@ class ChannelUpdateAction extends Action {
 
       if (ChannelTypes[channel.type] !== data.type) {
         const newChannel = Channel.create(this.client, data, channel.guild);
-        for (const [id, message] of channel.messages.cache) newChannel.messages.cache.set(id, message);
+        if (!newChannel) {
+          this.client.channels.cache.delete(channel.id);
+          return {};
+        }
+
+        if (channel.isText() && newChannel.isText()) {
+          for (const [id, message] of channel.messages.cache) newChannel.messages.cache.set(id, message);
+        }
+
         channel = newChannel;
         this.client.channels.cache.set(channel.id, channel);
       }
diff --git a/src/structures/GuildMember.js b/src/structures/GuildMember.js
index 2fff24990d3702865e28ee88cadd6c7908c49217..7cbd748307f488521665de96724622f1a62ef091 100644
--- a/src/structures/GuildMember.js
+++ b/src/structures/GuildMember.js
@@ -259,12 +259,12 @@ class GuildMember extends Base {
   }
 
   /**
-   * The nickname of this member, or their username if they don't have one
+   * The nickname of this member, or their user display name if they don't have one
    * @type {?string}
    * @readonly
    */
   get displayName() {
-    return this.nickname ?? this.user.username;
+    return this.nickname ?? this.user.displayName;
   }
 
   /**
diff --git a/src/structures/User.js b/src/structures/User.js
index dd1880edec3d5051a3b710f9ec530206f80d6193..c7e5321a3071ff818d582fd54c7a72ac9b1e972d 100644
--- a/src/structures/User.js
+++ b/src/structures/User.js
@@ -41,6 +41,16 @@ class User extends Base {
       this.username ??= null;
     }
 
+    if ('global_name' in data) {
+      /**
+       * The global name of this user
+       * @type {?string}
+       */
+      this.globalName = data.global_name;
+    } else {
+      this.globalName ??= null;
+    }
+
     if ('bot' in data) {
       /**
        * Whether or not the user is a bot
@@ -201,6 +211,15 @@ class User extends Base {
     return typeof this.username === 'string' ? `${this.username}#${this.discriminator}` : null;
   }
 
+  /**
+   * The global name of this user, or their username if they don't have one
+   * @type {?string}
+   * @readonly
+   */
+  get displayName() {
+    return this.globalName ?? this.username;
+  }
+
   /**
    * The DM between the client's user and this user
    * @type {?DMChannel}
diff --git a/typings/index.d.ts b/typings/index.d.ts
index 42630bb85c963ef8c14764a5e0fb8629e7c07d59..428fd58408f355380bb3d1c16886cb5092a8bb6c 100644
--- a/typings/index.d.ts
+++ b/typings/index.d.ts
@@ -2700,9 +2700,11 @@ export class User extends PartialTextBasedChannel(Base) {
   public readonly createdAt: Date;
   public readonly createdTimestamp: number;
   public discriminator: string;
+  public readonly displayName: string;
   public readonly defaultAvatarURL: string;
   public readonly dmChannel: DMChannel | null;
   public flags: Readonly<UserFlags> | null;
+  public globalName: string | null;
   public readonly hexAccentColor: HexColorString | null | undefined;
   public id: Snowflake;
   public readonly partial: false;
