{
	// Place your Skyra workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"SkyraCommand": {
		"scope": "typescript",
		"prefix": "command",
		"body": [
			"import { CommandStore, KlasaMessage } from 'klasa';",
			"import { SkyraCommand } from '../../lib/structures/SkyraCommand';",
			"",
			"export default class extends SkyraCommand {",
			"",
			"\tpublic constructor(store: CommandStore, file: string[], directory: string) {",
			"\t\tsuper(store, file, directory, {",
			"\t\t\tcooldown: $1,",
			"\t\t\tdescription: language => language.get('COMMAND_$2_DESCRIPTION'),",
			"\t\t\textendedHelp: language => language.get('COMMAND_$2_EXTENDED'),",
			"\t\t\trequiredPermissions: [$3],",
			"\t\t\tusage: '$4'",
			"\t\t});",
			"\t}",
			"",
			"\tpublic async run(message: KlasaMessage, [$5]: [$6]) {",
			"\t\treturn $7;",
			"\t}",
			"",
			"}"
		],
		"description": "Creates a SkyraCommand"
	}

}
